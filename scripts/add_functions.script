'************** Дополнительные общие функции vt5 **************

'==============================================================
' Максимум //
'==============================================================
Function Max(arg1, arg2)
	If arg1 > arg2 Then
		Max = arg1
	Else
		Max = arg2
	End If
End Function

'==============================================================
' Минимум //
'==============================================================
Function Min(arg1, arg2)
	If arg1 < arg2 Then
		Min = arg1
	Else
		Min = arg2
	End If
End Function

'==============================================================
' Десятичный логарифм //
'==============================================================
Function Log10(X)
	Log10 = Log(X) / Log(10)
End Function

'==============================================================
' Сортировка двумерного массива по одному столбцу //
' in:  arrSort - исходный массив //
'      iSortColumn - столбец массива для сортировки //
'        Пример:  arr(5,3)			//
'                     | |			//
'               строка   столбец	//
'         т.е: arr(0,0)  arr(0,1) 	//
'              arr(1,0)  arr(1,1) 	//
'              arr(2,0)  arr(2,1) 	//
'              arr(3,0)  arr(3,1) 	//
'      bAscending - по возрастанию / по убыванию (True/False) //
' out: arrSort - отсортированный массив //
'      SortArray возвращает успешность сортировки //
'==============================================================
Function sort_2D_array(ByRef arrSort, iSortColumn, bAscending)
	Dim tmpVar, iArrLength, iArrWidth
	sort_2D_array = False
	iArrLength = UBound(arrSort, 1)
	iArrWidth = UBound(arrSort, 2)
	If iArrLength <= 0 Then
		sort_2D_array = True
		Exit Function
	End If
	If iSortColumn > iArrWidth Then Exit Function

	i = 1
	Do
		If ( arrSort(i, iSortColumn) > arrSort(i - 1, iSortColumn) ) Xor bAscending Then
			For j = 0 To iArrWidth
				tmpVar = arrSort(i, j)
				arrSort(i, j) = arrSort(i - 1, j)
				arrSort(i - 1, j) = tmpVar
			Next
			i = 1
		Else
			i = i + 1
		End If
	Loop While i <= iArrLength
	sort_2D_array = True
End Function

'==============================================================
' Сортировка двумерного массива //
' То же, что и sort_2D_array, только в массиве первый индекс - столбец, а второй - строка //
'==============================================================
Function sort_2D_array2(ByRef arrSort, iSortColumn, bAscending)
	Dim tmpVar, iArrLength, iArrWidth
	sort_2D_array2 = False
	iArrLength = UBound(arrSort, 2)
	iArrWidth = UBound(arrSort, 1)
	If iArrLength <= 0 Then
		sort_2D_array2 = True
		Exit Function
	End If
	If iSortColumn > iArrWidth Then Exit Function

	i = 1
	Do
		If ( arrSort(iSortColumn, i) > arrSort(iSortColumn, i - 1) ) Xor bAscending Then
			For j = 0 To iArrWidth
				tmpVar = arrSort(j, i)
				arrSort(j, i) = arrSort(j, i - 1)
				arrSort(j, i - 1) = tmpVar
			Next
			i = 1
		Else
			i = i + 1
		End If
	Loop While i <= iArrLength
	sort_2D_array2 = True
End Function

'==============================================================
'Сортировка одномерного массива
'==============================================================
Function sort_1D_array(ByRef arrSort, bAscending)
	Dim tmpVar, iArrLength
	sort_1D_array = False
	iArrLength = UBound(arrSort)
	If iArrLength <= 0 Then
		sort_1D_array = True
		Exit Function
	End If
	i = 1
	Do
		If ( arrSort(i) > arrSort(i - 1) ) Xor bAscending Then
			tmpVar = arrSort(i)
			arrSort(i) = arrSort(i - 1)
			arrSort(i - 1) = tmpVar
			i = 1
		Else
			i = i + 1
		End If
	Loop While i <= iArrLength
	sort_1D_array = True
End Function

'==============================================================
'Поиск в одномерном массиве //
'возвращает позицию в массиве с первым найденным значением или -1 //
'==============================================================
Function FindInArray(arr1, value)
	Dim i
	FindInArray = -1
	For i = 0 To UBound(arr1)
		If arr1(i) = value Then
			FindInArray = i
			Exit Function
		End If
	Next
End Function

'==============================================================
' Округление числа к ближайшему {1|2|5}*10eX //
' 1.1  => 1 //
' 199  => 200 //
' 0.27 => 0.2 //
' 0.07 => 0.05 //
'==============================================================
Function RoundEx(Value)
	Dim n1, n2, i, negativ
	negativ = 0
	RoundEx = Value
	If Value=0 Then Exit Function
	If Value <= 0 Then 
		Value = abs(Value)
		negativ = 1
	End If
	n1 = 0
	Do While Value < 1
		Value = Value * 10
		n1 = n1 + 1
	Loop
	n2 = 0
	Do While Value >= 10
		Value = Value / 10
		n2 = n2 + 1
	Loop
	If Value > 7.1 Then
		Value = 10
	ElseIf Value > 3.2 Then
		Value = 5
	ElseIf Value > 1.4 Then
		Value = 2
	Else
		Value = 1
	End If
	For i = 1 To n1
		Value = Value / 10
	Next
	For i = 1 To n2
		Value = Value * 10
	Next
	If negativ Then
		RoundEx = -Value
	Else
	RoundEx = Value
	End If	
End Function

'==============================================================
' Возвращает ближайшее к dValue значение из массива arrValues (bReturnIndex = 0) //
' Если bReturnIndex = 1, возвращает индекс значения в массиве //
'==============================================================
Function GetNearestValue(arrValues, dValue, bReturnIndex)
	ii = 0
	dDiffMin = Abs(arrValues(0) - dValue)
	For i = 1 To UBound(arrValues)
		dDiff = Abs(arrValues(i) - dValue)
		If dDiff < dDiffMin Then
			ii = i
			dDiffMin = dDiff
		End If
	Next
	If bReturnIndex Then
		GetNearestValue = ii
	Else
		GetNearestValue = arrValues(ii)
	End If
End Function

'==============================================================
' Измененное форматирование числа //
' vExpression - форматируемое число  //
' iNumDigits - кол-во значимых разрядов //
' iNumDigitsAfterDecimalMin - минимальное кол-во разрядов после дес. точки //
' Примеры: FormatNumberEx(100, 1, 2) => "100.00" //
'          FormatNumberEx(-5, 3, 0) => "-5.00" //
'          FormatNumberEx(0.0012345, 3, 2) => "0.00123" //
'          FormatNumberEx(3e-5, 2, 0) => "0.000030" //
'==============================================================
Function FormatNumberEx(ByVal vExpression, ByVal iNumDigits, ByVal iNumDigitsAfterDecimalMin)
	Dim lFix, dValue, ii
	FormatNumberEx = "0"
	If Not IsNumeric(vExpression) Then Exit Function
	lFix = Abs(Fix(vExpression))
	If lFix > 0 Then
		iNumDigits = CInt( iNumDigits - Len(CStr(lFix)) )
	ElseIf vExpression <> 0 Then
		dValue = Abs(vExpression)
		ii = -1
		Do
			dValue = dValue * 10
			ii = ii + 1
		Loop Until Fix(dValue) > 0
		iNumDigits = iNumDigits + ii
	End If
	If iNumDigits < iNumDigitsAfterDecimalMin Then iNumDigits = iNumDigitsAfterDecimalMin
	If iNumDigits <= 0 Then iNumDigits = 0
	FormatNumberEx = FormatNumber(vExpression, iNumDigits)
End Function

'==============================================================
' Преобразование числа в строку с дес. разделителем в виде точки //
'==============================================================
Function CStr2(str)
	CStr2 = Replace(str, ",", ".")
End Function


'==============================================================
' Получение текущего view - строка  //'!!!as
'==============================================================
Function GetCurrentView()
	Dim frame, Splitter, nRow, nCol
	GetCurrentView  = ""
	Set frame = MainWnd.ActiveFrame
	If Not Docs.IsPointerNull(frame) Then
		Set Splitter = frame.GetSplitter
		GetCurrentView = Splitter.GetActiveViewType (nRow, nCol)
		Set Splitter = Nothing
	End If
	Set frame = Nothing
End Function

'==============================================================
' Установка view //
'==============================================================
Function SetView(sViewType)
	Dim frame, Splitter, nRow, nCol, void
	Set frame = MainWnd.ActiveFrame
	If Not Docs.IsPointerNull(frame) Then
		Set Splitter = frame.GetSplitter
		void = Splitter.GetActiveViewType (nRow, nCol)
		Splitter.ActivateView nRow, nCol, sViewType
		Set Splitter = Nothing
	End If
	Set frame = Nothing
End Function

Function ActivateView2(n)
	Dim frame, Splitter, nRow, nCol, void
	Set frame = MainWnd.ActiveFrame
	If Not Docs.IsPointerNull(frame) Then
		Set Splitter = frame.GetSplitter
		Splitter.ActivateView n, 0, ""
		Set Splitter = Nothing
	End If
	Set frame = Nothing
End Function

'===============================================================
' Получение текущего zoom  //
'===============================================================
Function GetCurrentZoom(lCol,lRow)
	Dim frame, s
	Set frame = MainWnd.ActiveFrame
	If Not Docs.IsPointerNull(frame) Then
		Set s = frame.GetSplitter
		GetCurrentZoom = s.GetViewZoom(lCol,lRow)
		Set s = Nothing
	End If
	Set frame = Nothing
End Function

'===============================================================
' Установка zoom  //
'===============================================================
Sub SetZoom(lCol,lRow,dZoom)
	Dim frame, s
	Set frame = MainWnd.ActiveFrame
	If Not Docs.IsPointerNull(frame) Then
		Set s = frame.GetSplitter
		s.SetViewZoom lCol,lRow,dZoom
		Set s = Nothing
	End If
	Set frame = Nothing
End Sub

'===============================================================
' 0 - окно не разделено //
' 1 - вертикальный сплиттер //
' 2 - горизонтальный сплиттер //
' 3 - разделено и по горизонтали и по вертикали //
' -1 - нет доступа к ActiveFrame //
'===============================================================
Function IsWindowSplit()
	IsWindowSplit = -1
	Dim frame, s
	Set frame = MainWnd.ActiveFrame
	If Not Docs.IsPointerNull(frame) Then
		Set s = frame.GetSplitter
		IsWindowSplit = s.GetColumnsCount() - 1 + ( s.GetRowCount() - 1 ) * 2
		Set s = Nothing
	End If
	Set frame = Nothing
End Function


'==============================================================
' Копирует единичное value: name.data -> shell.data //
' In: objData  - name.data оъекта //
'     strEntry - адрес value //
'==============================================================
Function load_value(objData, strEntry)
	load_value = False
	If Docs.IsPointerNull(objData) Then Exit Function
	Data.SetValue strEntry, objData.GetValue(strEntry)
	load_value = True
End Function

'==============================================================
' Копирует единичное value: shell.data -> name.data //
' In: objData  - name.data оъекта //
'     strEntry - адрес value //
'==============================================================
Function save_value(objData, strEntry)
	save_value = False
	If Docs.IsPointerNull(objData) Then Exit Function
	objData.SetValue strEntry, Data.GetValue(strEntry)
	save_value = True
End Function

'==============================================================
' Копирует ветку name.data -> shell.data //
' In: objData  - name.data оъекта //
'     strEntry - копируемая ветка //
'==============================================================
Function load_entry(objData, strEntry)
	Dim strFieldName, varValue
	load_entry = False
	If Docs.IsPointerNull(objData) Then Exit Function
'	If Mid(strEntry, Len(strEntry)) = "\" Then strEntry = Left(strEntry, Len(strEntry) - 1)
	Data.CopyNamedData objData, strEntry, strEntry, 1
	load_entry = True
End Function

'==============================================================
' Копирует ветку name.data -> shell.data (SrcPath <> TargetPath) //
' In: objData  - name.data оъекта //
'     strSrcEntry - копируемая ветка в name.data //
'     strTargEntry - целевая ветка в shell.data //
'==============================================================
Function load_entry_ex(objData, strSrcEntry, strTargEntry)
	Dim strFieldName, varValue
	load_entry_ex = False
	If Docs.IsPointerNull(objData) Then Exit Function
	Data.CopyNamedData objData, strSrcEntry, strTargEntry, 1
	load_entry_ex = True
End Function

'==============================================================
' Копирует ветку shell.data -> name.data //
' In: objData  - name.data оъекта //
'     strEntry - копируемая ветка //
'==============================================================
Function save_entry(objData, strEntry)
	Dim strFieldName, varValue
	save_entry = False
	If Docs.IsPointerNull(objData) Then Exit Function
'	If Mid(strEntry, Len(strEntry)) = "\" Then strEntry = Left(strEntry, Len(strEntry) - 1)
	objData.CopyNamedData Data, strEntry, strEntry, 1
	save_entry = True
End Function

'==============================================================
' Копирует ветку shell.data -> name.data (SrcPath <> TargetPath) //
' In: objData  - name.data оъекта //
'     strSrcEntry - копируемая ветка в shell.data //
'     strTargEntry - целевая ветка в name.data //
'==============================================================
Function save_entry_ex(objData, strSrcEntry, strTargEntry)
	Dim strFieldName, varValue
	save_entry_ex = False
	If Docs.IsPointerNull(objData) Then Exit Function
	objData.CopyNamedData Data, strSrcEntry, strTargEntry, 1
	save_entry_ex = True
End Function

'==============================================================
' Название активной калибровки //
'==============================================================
Function GetActiveCalibrName()
	GetActiveCalibrName = Data.GetValue("\NewCalibr\" & Data.GetValue("\NewCalibr\Active") & "\Name")
End Function

'==============================================================
' Коэффициент активной калибровки (m/pixel) //
'==============================================================
Function GetActiveCalibrCoef()
	GetActiveCalibrCoef = Data.GetValue("\NewCalibr\" & Data.GetValue("\NewCalibr\Active") & "\MeterPerPixel")
End Function

'==============================================================
' Коэффициент активной калибровки в текущих единицах (unit/pixel) //
'==============================================================
Function GetCurrentCalibrCoeff()
	UnitCoeff = VTDbl(Data.Getvalue ("\Units\Linear\CoeffToUnit"))
	CurrentGUID = Data.Getvalue ("\NewCalibr\Active\")
	MeterPerPixelCoeff = VTDbl(Data.Getvalue ("\NewCalibr\"+CurrentGUID+"\MeterPerPixel"))
	GetCurrentCalibrCoeff = VTDbl(UnitCoeff * MeterPerPixelCoeff)
End Function

'==============================================================
' возвращает true или false //
'==============================================================
Function isDocImage
	Dim objActDoc,objImageDoc
	Set objActDoc = Docs.ActiveDocument
	Set objImageDoc = Docs.GetActiveDocument("Image")
	isDocImage = (TypeName(objActDoc) = "Object" And objActDoc Is objImageDoc)
End Function

'==============================================================
' возвращает true или false //
'==============================================================
Function isDocDB
	Set objActDoc = Docs.ActiveDocument
	Set objDBDoc = Docs.GetActiveDocument("Database")
	isDocDB = (TypeName(objActDoc) = "Object" And objActDoc Is objDBDoc)
End Function

'==============================================================
' возвращает ссылку на открытый файл типа Image или Database //
' если в программе файл не открыт, возвращает Nothing //
'==============================================================
Function GetDocByName(sDocType, ByVal sFilePath)
	Set GetDocByName = Nothing
	sFilePath = Trim(LCase(sFilePath))
	If sFilePath = "" Then Exit Function
	For i = 0 To Docs.GetDocumentsCount(sDocType) - 1
		Set GetDocByName = Docs.GetDocument(i, sDocType)
		If Trim(LCase(GetDocByName.GetDocPathName)) = sFilePath Then Exit Function
	Next
	Set GetDocByName = Nothing
End Function

'==============================================================
' активизирует объект по имени //
'==============================================================
Sub ActivateObjectByName(ObjName)
	Dim o
	Set o = Objects.GetObjectByName (ObjName)
	If not Docs.IsPointerNull(o) Then
	Objects.SetObjectActive(o)
	Set o = Nothing
	End If
End Sub

'==============================================================
' Select Object By Name ...
'==============================================================
Sub SelectObjByName (Name)
	dim pos
	Objects.GetFirstSelectedObjectPos "Image", pos
	if pos > 0 then
		set tmp = Objects.GetObject("Image", pos )
		Objects.SelectObject tmp ,false
		set tmp = Nothing
	End If

	Set objOL1 = Objects.GetObjectByName(Name)
	If not Docs.IsPointerNull(objOL1) Then Objects.SelectObject objOL1,true
	Set objOL1 = Nothing
End Sub

'==============================================================
' Снимаем выделение со всех объектов данного типа //
'==============================================================
Sub DeSelectAllObjects(sType)
	For i = 0 To Objects.GetSelectedObjectsCount(sType) - 1
		Objects.SelectObject Objects.GetSelectedByIndex(sType, 0), 0
	Next
End Sub

'==============================================================
' Задержка в милисекундах //
'==============================================================
Sub Delay(N)
	Dim StartTime, EndTime
	StartTime = Timer*1000
	do
		ProcessMessage 0
		EndTime = Timer*1000
	Loop while (EndTime - StartTime < N)
End Sub

'==============================================================
' удаление объектов неизвестного класса //
'==============================================================
Sub RemoveUnknownClass()
	Dim ObjList, strName, strUnits, lkey, fcalibr
	Dim i, f, ObjCount, o
	Set ObjList = Objects.GetActiveObject( "Object List" )
	If not Docs.IsPointerNull(ObjList) Then
		ObjCount = ObjList.GetCount
		For i=ObjCount-1 To 0 step -1
			Set o = ObjList.GetObjectByIdx( i )
			f = o.GetClass ("")
			If f = -1 Then ObjList.RemoveObjectByIdx(i)
			Set o = Nothing
		Next
	End If
	Set ObjList = Nothing
End Sub

'==============================================================
' проверка - есть ли Object типа
'==============================================================
Function ExistObj (tp)
	ExistObj = false
	Set Doc = Objects.GetActiveObject (tp)
	If not Docs.IsPointerNull(Doc) Then
		ExistObj = true
		Set Doc = Nothing
	End If
End Function
'==============================================================
' проверка - есть ли объект с таким именем //
'==============================================================
Function ExistObjectByName(ObjName)
	ExistObjectByName = false
	set a = Objects.GetObjectByName (ObjName)
	If not Docs.IsPointerNull(a) Then
		ExistObjectByName = true
	End If
	set a = Nothing
End Function
'==============================================================
' проверка - есть ли изображение //
'==============================================================
Function ExistImage()
	ExistImage = false
	Set ImgDoc = Docs.GetActiveDocument ("Image")
	If not Docs.IsPointerNull(ImgDoc) Then
		ExistImage = true
		Set ImgDoc = Nothing
	End If
End Function
'==============================================================
' активизация изображения //
'==============================================================
Function ActivityImage()
	ActivityImage = false
	Set ImgDoc = Docs.GetActiveDocument ("Image")
	If not Docs.IsPointerNull(ImgDoc) Then
		Docs.ActiveDocument = ImgDoc
		pos = Objects.GetFirstObjectPos("Image")
		If pos > 0 Then
			If IsNotAVI() Then
				Set img = Objects.GetObject ("Image", pos)
				Objects.SetObjectActive img
				Set img = Nothing
			End If
		End If
		Set ImgDoc = Nothing
		ActivityImage = true
	End If
End Function
'==============================================================
' родительское изображение от рамки objImage //
' если objImage не рамка, возвращает objImage //
'==============================================================
Function GetParentImage(objImage)
	Set GetParentImage = Nothing
	If Docs.IsPointerNull(objImage) Then Exit Function
	Set GetParentImage = objImage.GetParent
	If Docs.IsPointerNull(GetParentImage) Then
		Set GetParentImage = objImage
	End If
End Function

'==============================================================
' установка активной калибровки, если нет единиц - не менять //
'==============================================================
Sub SetActivCalibr(id,unit,coeff)
	Data.SetSection "\NewCalibr"
	n = Data.GetEntriesCount
	For i=0 To n-1
		If id = Data.GetEntryName (i) Then
			Data.SetValue "\NewCalibr\Active", id
			Exit for
		End If
	Next
	If unit <> "" Then
		Data.SetValue "\Units\Linear\Name", unit
		Data.SetValue "\Units\Linear\CoeffToUnit", coeff
	End If
	MainWnd.UpdateSystemSettings
End Sub

'==============================================================
' Чтение из NameData первого документа Image //
'==============================================================
Function GetImageData( key  )
	Set ImgD = Docs.GetDocument(0, "Image")
	If Docs.IsPointerNull(ImgD) Then
		GetImageData = "0"
		exit Function
	else
		Set ImgDD = ImgD.GetData()
		GetImageData = ImgDD.GetValue("\"+key)
		Set ImgDD = Nothing
	End If
	Set ImgD = Nothing
End Function

'==============================================================
' Запись в NameData первого документа Image //
'==============================================================
Sub SetImageData( key, value )
	Dim ImgD
	Set ImgD = Docs.GetDocument(0, "Image")
	If not Docs.IsPointerNull(ImgD) Then
		Set ImgDD = ImgD.GetData()
		ImgDD.SetValue "\"+key, value
		Set ImgDD = Nothing
	End If
	Set ImgD = Nothing
End Sub


'==============================================================
' Чтение из NameData документа объектных переменных //
' iDocType = -1 - активный документ //
'             0 - активный документ Image //
'             1 - активный документ Database //
'==============================================================
Function DocGetObjValue(iDocType, sKey)
	Dim objDoc, value
	Select Case iDocType
	  Case -1
		Set objDoc = Docs.ActiveDocument
	  Case 0
		Set objDoc = Docs.GetActiveDocument("Image")
	  Case 1
		Set objDoc = Docs.GetActiveDocument("Database")
	End Select
	If Docs.IsPointerNull(objDoc) Then Exit Function

	Set DocGetObjValue = objDoc.GetData().GetValue(sKey)
	Set objDoc = Nothing
End Function

'==============================================================
' Чтение из NameData документа //
' iDocType = -1 - активный документ //
'             0 - активный документ Image //
'             1 - активный документ Database //
' varDefValue - значение по умолчанию //
'==============================================================
Function DocGetValue(iDocType, sKey, varDefValue)
	Dim objDoc, value
	Select Case iDocType
	  Case -1
		Set objDoc = Docs.ActiveDocument
	  Case 0
		Set objDoc = Docs.GetActiveDocument("Image")
	  Case 1
		Set objDoc = Docs.GetActiveDocument("Database")
	End Select
	If Docs.IsPointerNull(objDoc) Then Exit Function

	value = objDoc.GetData().GetDefValue(sKey, "Nothing")
	If value = "Nothing" Then
		objDoc.GetData().SetValue sKey, varDefValue
		value = varDefValue
	End If
	DocGetValue = value
	Set objDoc = Nothing
End Function

'==============================================================
' Запись в NameData первого документа Image //
' iDocType = -1 - активный документ //
'             0 - активный документ Image //
'             1 - активный документ Database //
'==============================================================
Sub DocSetValue(iDocType, sKey, varValue)
	Dim objDoc
	Select Case iDocType
	  Case -1
		Set objDoc = Docs.ActiveDocument
	  Case 0
		Set objDoc = Docs.GetActiveDocument("Image")
	  Case 1
		Set objDoc = Docs.GetActiveDocument("Database")
	End Select
	If Docs.IsPointerNull(objDoc) Then Exit Sub
	objDoc.GetData().SetValue sKey, varValue
	Set objDoc = Nothing
End Sub

'==============================================================
' Чтение из NameData объекта //
' vObject может принимать значения типа Object (ссылка на объект) или String (имя объекта) //
' varDefValue - значение по умолчанию //
'==============================================================
Function ObjectGetValue(vObject, sKey, varDefValue)
	Dim obj1, value
	If IsObject(vObject) Then
		Set obj1 = vObject
	Else
		Set obj1 = Objects.GetObjectByName( CStr(vObject) )
	End If
	If Docs.IsPointerNull(obj1) Then 
		ObjectGetValue = varDefValue
		Exit Function
	End If
	value = obj1.GetPrivateNamedData().GetDefValue(sKey, "Nothing")
	If value = "Nothing" Then
		obj1.GetPrivateNamedData().SetValue sKey, varDefValue
		value = varDefValue
	End If
	ObjectGetValue = value
	Set obj1 = Nothing
End Function

'==============================================================
' Запись в NameData объекта //
' vObject может принимать значения типа Object (ссылка на объект) или String (имя объекта) //
'==============================================================
Sub ObjectSetValue(vObject, sKey, varValue)
	Dim obj1
	If IsObject(vObject) Then
		Set obj1 = vObject
	Else
		Set obj1 = Objects.GetObjectByName( CStr(vObject) )
	End If
	If Docs.IsPointerNull(obj1) Then Exit Sub
	obj1.GetPrivateNamedData().SetValue sKey, varValue
	Set obj1 = Nothing
End Sub

Function GetNameActivImage()
	Dim img
	GetNameActivImage = ""
	Set img = Objects.GetActiveObject( "Image" )
	If not Docs.IsPointerNull(img) Then GetNameActivImage = img.Name
	Set img  = Nothing
End Function

Function GetNameActivBinary()
	Dim img
	GetNameActivBinary = ""
	Set img = Objects.GetActiveObject( "Binary" )
	If not Docs.IsPointerNull(img) Then GetNameActivBinary = img.Name
	Set img  = Nothing
End Function

Function IsNotAVI()
	Dim img
	IsNotAVI = CLng(1)
	Set img = Objects.ActiveImage
	If not Docs.IsPointerNull(img) Then
		If  img.GetColorSystem = "RGB_AVI" Then IsNotAVI = CLng(0)
		Set img = Nothing
	End If
End Function

Function GetAviCurrFrame()
	Dim Avi
	GetAviCurrFrame = 0
	If IsNotAVI() Then exit Function
	Set Avi = Objects.GetActiveObject( "Image" )
	If not Docs.IsPointerNull(Avi) Then
		 GetAviCurrFrame = Avi.CurFrame
	End If
	Set Avi = Nothing
End Function

'==============================================================
' Имя файла без расширения //
'==============================================================
Function GetFileName(sFullPath)
	Dim iPos, iPos2
	GetFileName = ""
	If sFullPath = "" Then Exit Function
	iPos = InstrRev(sFullPath, ".")
	If iPos = 0 Then iPos = Len(sFullPath)
	iPos2 = InstrRev(sFullPath, "\", iPos)
	If iPos2 = Len(sFullPath) Then Exit Function	'если последний символ - "\" //
	GetFileName = Mid(sFullPath, iPos2 + 1, iPos - iPos2 - 1)
End Function

'==============================================================
' Расширение файла (в нижнем регистре) //
'==============================================================
Function GetFileExt(sFullPath)
	Dim iPos
	GetFileExt = ""
	If sFullPath = "" Then Exit Function
	iPos = InstrRev(sFullPath, ".")
	If iPos = 0 Then Exit Function
	GetFileExt = LCase(Mid(sFullPath, iPos + 1))
End Function

'==============================================================
' Имя файла с расширением //
'==============================================================
Function GetFileNameExt(sFullPath)
	Dim iPos
	GetFileNameExt = ""
	If sFullPath = "" Then Exit Function
	iPos = InstrRev(sFullPath, "\")
	If iPos = Len(sFullPath) Then Exit Function		'если последний символ - "\" //
	GetFileNameExt = Mid(sFullPath, iPos + 1)
End Function

'==============================================================
' Путь файла //
'==============================================================
Function GetFilePath(sFullPath)
	Dim iPos
	GetFilePath = ""
	If sFullPath = "" Then Exit Function
	iPos = InstrRev(sFullPath, "\")
	If iPos = 0 Then Exit Function
	GetFilePath = Left(sFullPath, iPos - 1)
End Function

'==============================================================
' Parent Folder //
'==============================================================
Function GetParentFolder(sPath)
	Dim iPos
	GetParentFolder = ""
	If sPath = "" Then Exit Function
	iPos = InstrRev(sPath, "\", Len(sPath) - 1)
	If iPos = 0 Then Exit Function
	GetParentFolder = Left(sPath, iPos - 1)
End Function


'==============================================================
' Размер файла //
'==============================================================
Function GetFileSize(filespec)
	Dim fso, f
	Set fso = CreateObject("Scripting.FileSystemObject")
	GetFileSize = -1
	If Not fso.FileExists(filespec) Then Exit Function
	Set f = fso.GetFile(filespec)
	If TypeName(f) = "Nothing" Then Exit Function
	GetFileSize = f.Size
End Function

'==============================================================
' Копирование файла //
' from, target - полные пути //
'==============================================================
Sub FileCopy(from, target)
	Dim fso
	Set fso = CreateObject("Scripting.FileSystemObject")
	If (fso.FileExists(from)) Then
		Set MyFile = fso.GetFile(from)
		MyFile.Copy (target)
	End If
End Sub


'==============================================================
' Определение количества объектов в списке объектов vOList (название объекта, ссылка) //
' Если vOList = "", берем активный список объектов //
' iClass = -3  -  все объекты //
'          -2  -  все объекты кроме неизвестного класса //
' iClass = -1  -  все объекты неизвестного класса //
' iClass >= 0  -  все объекты указанного класса //
'==============================================================
Function GetObjectsCount(ByVal vOList, iClass)
	Dim objList, iObjCount, i
	GetObjectsCount = 0
	If IsObject(vOList) Then
		Set objList = vOList
	ElseIf vOList = "" Then
		Set objList = Objects.ActiveObjectList
	Else
		Set objList = Objects.GetObjectByName( CStr(vOList) )
	End If
	If Docs.IsPointerNull(objList) Then Exit Function
	iObjCount = objList.GetCount
	If iClass = -3 Then
		GetObjectsCount = iObjCount
	ElseIf iClass = -2 Then
		For i = 0 To iObjCount - 1
			If objList.GetObjectByIdx( i ).GetClass( "" ) >= 0 Then GetObjectsCount = GetObjectsCount + 1
		Next
	ElseIf iClass > -2 Then
		For i = 0 To iObjCount - 1
			if objList.GetObjectByIdx( i ).GetClass( "" ) = iClass Then GetObjectsCount = GetObjectsCount + 1
		Next
	End If
	Set objList = Nothing
End Function

'==============================================================
' Определение количества объектов в списке объектов vOList (название объекта, ссылка) //
' Если vOList = "", берем активный список объектов //
' iClass = -3  -  все объекты //
'          -2  -  все объекты кроме неизвестного класса //
' iClass = -1  -  все объекты неизвестного класса //
' iClass >= 0  -  все объекты указанного класса //
' В отличие от GetObjectsCount, игнорирует ручные объекты //
' (определение ручного объекта производится по отсутствию картинки) //
'==============================================================
Function GetObjectsCountEx(ByVal vOList, iClass)
	Dim objList, iObjCount, i, obj
	GetObjectsCountEx = 0
	If IsObject(vOList) Then
		Set objList = vOList
	ElseIf vOList = "" Then
		Set objList = Objects.ActiveObjectList
	Else
		Set objList = Objects.GetObjectByName( CStr(vOList) )
	End If
	If Docs.IsPointerNull(objList) Then Exit Function
	iObjCount = objList.GetCount
	If iClass = -3 Then
		For i = 0 To iObjCount - 1
			If Not Docs.IsPointerNull(objList.GetObjectByIdx( i ).GetImage) Then _
			  GetObjectsCountEx = GetObjectsCountEx + 1
		Next
	ElseIf iClass = -2 Then
		For i = 0 To iObjCount - 1
			Set obj = objList.GetObjectByIdx( i )
			If obj.GetClass( "" ) >= 0 And Not Docs.IsPointerNull(obj.GetImage) Then _
			  GetObjectsCountEx = GetObjectsCountEx + 1
		Next
	ElseIf iClass > -2 Then
		For i = 0 To iObjCount - 1
			Set obj = objList.GetObjectByIdx( i )
			if obj.GetClass( "" ) = iClass And Not Docs.IsPointerNull(obj.GetImage) Then _
			  GetObjectsCountEx = GetObjectsCountEx + 1
		Next
	End If
	Set objList = Nothing
End Function

'==============================================================
' Отмена разделения окна //
'==============================================================
Sub WindowUnSplit()
	Dim frame, s
	Set frame = MainWnd.ActiveFrame
	If Not Docs.IsPointerNull(frame) Then
		Set s = frame.GetSplitter
		s.Split 1, 1
		Set s = Nothing
	End If
	Set frame = Nothing
End Sub

'==============================================================
' Разделение окна по горизонтали //
' nParts = 1|2  -  кол-во частей //
' sViewLeft     -  вью слева (если "", то не выставлять) //
' sViewRight    -  вью справа (если "", то не выставлять) //
' nActive = 0|1 -  какую часть активизировать (если -1, то не активизировать) //
'==============================================================
Sub WindowSplitHor(nParts, sViewLeft, sViewRight, nActive)
	Dim frame, s
	Set frame = MainWnd.ActiveFrame
	If Not Docs.IsPointerNull(frame) Then
		Set s = frame.GetSplitter
		s.Split nParts, 1
		If sViewLeft <> "" Then s.SetViewType 0, 0, sViewLeft
		If nParts = 2 Then
			If sViewRight <> "" Then s.SetViewType 1, 0, sViewRight
			Select Case nActive
			  Case 0
				s.ActivateView 0, 0, ""
			  Case 1
				s.ActivateView 1, 0, ""
			End Select
		End If
		Set s = Nothing
	End If
	Set frame = Nothing
End Sub

'==============================================================
' Доступность кнопок сплиттера //
'==============================================================
Sub BlockSplitterButtons(Block)
	Dim f
	Set f = MainWnd.ActiveFrame
	If TypeName(f) <> "Nothing" Then
		If Block Then
			f.GetSplitter.BlockButton True
			f.GetSplitter.EnableButton -1, -1, 31, 0
		Else
			f.GetSplitter.BlockButton False
			f.GetSplitter.EnableButton -1, -1, 31, 31
		End If
	End If
	Set f = Nothing
End Sub

'==============================================================
' Площадь изображения //
' vImage = Object - ссылка на изображение //
' vImage = String - имя изображения //
' vImage = "" - берем активное изображение //
' iUnits = 0 - площадь в кв.пикселах //
'          1 - площадь в кв.м //
'          2 - площадь в кв.единицах //
'==============================================================
Function GetImageArea(vImage, iUnits)
	Dim dCoeff, objImage
	GetImageArea = 0
	If vImage = "" Then
		Set objImage = Objects.ActiveImage
	ElseIf IsObject(vImage) Then
		Set objImage = vImage
	Else
		Set objImage = Objects.GetObjectByName(vImage)
	End If
	If Docs.IsPointerNull(objImage) Then Exit Function

	Select Case iUnits
	  Case 1
		dCoeff = GetActiveCalibrCoef()
	  Case 2
		dCoeff = GetCurrentCalibrCoeff()
	  Case Else
		dCoeff = 1
	End Select
	GetImageArea = objImage.GetWidth * objImage.GetHeight * dCoeff * dCoeff
End Function

'==============================================================
' влючить набор параметров для методики //
'==============================================================
Sub SetParamFor(methods)
	Dim section
	' Сброс всех параметров
	Data.SetSection "\measurement\parameters"
	For i = 0 To Data.GetEntriesCount - 1
		strEntryName = Data.GetEntryName(i)
		Data.SetValue "\measurement\parameters\" & strEntryName & "\Enable", 0
	Next

	' и включение нужных
	If len (methods) > 0 Then
		section = "\measurement\" + methods
		Data.SetSection section
		section = section + "\"
		For i = 0 To Data.GetEntriesCount - 1
			strEntryName = Data.GetEntryName(i)
			If Data.GetValue(section & strEntryName & "\Enable") Then
				Data.SetValue "\measurement\parameters\" & strEntryName & "\Enable", 1
			End If
		Next
	End If
	MainWnd.UpdateSystemSettings
End Sub


'==============================================================
' Включение параметров, участвующих в расчете включенных пользовательских //
'==============================================================
Sub SetDependentParams
	Dim sParamSec, bNeedUpdate
	bNeedUpdate = False
	Data.SetSection "\measurement\parameters"
	For i = 0 To Data.GetEntriesCount - 1
		strEntryName = Data.GetEntryName(i)
		sParamSec = "\measurement\parameters\" & strEntryName
		key = Data.GetDefValue (sParamSec & "\Key", -1)
		'только для юзерских параметров //
		If key >= 131073 And key <= 196609 Then
			If Data.GetDefValue (sParamSec & "\Enable", 0) Then
				Call check_user_param( sParamSec, key )
				bNeedUpdate = True
			End If
		End If
	Next
	If bNeedUpdate Then MainWnd.UpdateSystemSettings
End Sub

'включение параметров, участвующих в расчете параметра key (для юзерских параметров) //
Sub check_user_param(sParamSec, key)
	Dim param_sl
	If sParamSec = "" Then Exit Sub
	Dim param_array, i
	param_array = Split( get_used_params( Data.GetDefValue (sParamSec & "\ExprString", ""), key), "," )
	For i = 0 To UBound(param_array)
		If param_array(i) <> "" Then
			'MsgBox param_array(i)
			'название подчиненного параметра //
			param_sl = GetParamMainName( CLng( param_array(i) ) )
			Data.SetValue "\measurement\parameters\" & param_sl & "\Enable", 1
		End If
	Next
End Sub

'получение списка параметров, используемых в формуле (через запятую), параметр key игнорируется //
Function get_used_params(ByVal expression, key)
	Dim i, self_key, key_array, pos, return_key_array(), n
	n = -1
	self_key = "{" & CStr(key) & "}"
	expression = Replace(expression, self_key, "")	'удаляем ключ самого параметра //
	key_array = Split(expression, "}")
	For i = 0 To UBound(key_array)
		pos = InStr( key_array(i), "{" )
		If pos > 0 Then
			get_used_params = get_used_params & "," & Mid( key_array(i), pos + 1 )
			new_key = Mid( key_array(i), pos + 1 )
			If new_key <> "" Then
				If n = -1 Then
					n = n + 1
					ReDim Preserve return_key_array(n)
					return_key_array(n) = new_key
				ElseIf FindInArray(return_key_array, new_key) = -1 Then
					n = n + 1
					ReDim Preserve return_key_array(n)
					return_key_array(n) = new_key
				End If
			End If
		End If
	Next
	get_used_params = Join( return_key_array, "," )
End Function
'==============================================================


'==============================================================
' есть ли активный "Object List"
'==============================================================
Function IsObjectListActive()
	IsObjectListActive = false
	Set ObjList = Objects.GetActiveObject( "Object List" )
	If not Docs.IsPointerNull(ObjList) Then IsObjectListActive = true
	Set ObjList = Nothing
End Function


'==========================================================
' Кол-во классов в классификаторе //
'==========================================================
Function GetClassCount(ByVal sClassFile)
	If sClassFile = "" Then
		sClassFile = Data.GetValue("\Classes\ClassFile")
	Else
		sClassFile = Data.GetValue("\Paths\Classes") & sClassFile
	End If
	GetClassCount = Application.GetPrivateProfileString(sClassFile, "Classes", "ClassCount", "")
End Function

'==========================================================
' Название класса по индексу //
'==========================================================
Function GetClassName(ByVal sClassFile, iClass)
	Dim sClassName
	GetClassName = ""
	If sClassFile = "" Then
		sClassFile = Data.GetValue("\Classes\ClassFile")
	Else
		sClassFile = Data.GetValue("\Paths\Classes") & sClassFile
	End If
	sClassName = Application.GetPrivateProfileString(sClassFile, "Classes", CStr(iClass), "")
	pos = InStr(sClassName, ")" )
	If pos > 0 Then GetClassName = Mid( sClassName, pos + 2 )
End Function

'==========================================================
' Цвет класса по индексу //
'==========================================================
Function GetClassColor(ByVal sClassFile, iClass)
	Dim sClassName
	GetClassColor = ""
	If sClassFile = "" Then
		sClassFile = Data.GetValue("\Classes\ClassFile")
	Else
		sClassFile = Data.GetValue("\Paths\Classes") & sClassFile
	End If
	sClassName = Application.GetPrivateProfileString(sClassFile, "Classes", CStr(iClass), "")
	pos = InStr(sClassName, ")" )
	If pos > 0 Then GetClassColor = Left( sClassName, pos )
End Function


'==============================================================
' Получение цветовой модели изображения //
' vImage = Object - ссылка на изображение //
' vImage = String - имя изображения //
' vImage = "" - берем активное изображение //
'==============================================================
Function GetColorSystem(vImage)
	Dim objImage
	GetColorSystem = ""
	If vImage = "" Then
		Set objImage = Objects.ActiveImage
	ElseIf IsObject(vImage) Then
		Set objImage = vImage
	Else
		Set objImage = Objects.GetObjectByName(vImage)
	End If
	If Docs.IsPointerNull(objImage) Then Exit Function
	GetColorSystem = objImage.GetColorSystem
End Function

'==============================================================
' Преобразование цвета в строковый формат "(128,255,0)" //
'==============================================================
Function ConvertColorBinToStr(ByVal iColor)
	ConvertColorBinToStr = ""
	If Not IsNumeric(iColor) Then Exit Function
	If iColor < 0 Then iColor = 0
	R = iColor Mod 256
	iColor = Int(iColor / 256)
	G = iColor Mod 256
	B = Int(iColor / 256)
	ConvertColorBinToStr = "(" & CStr(R) & "," & CStr(G) & "," & CStr(B) & ")"
End Function

'==============================================================
' Преобразование цвета в бинарный формат //
'==============================================================
Function ConvertColorStrToBin(ByVal sColor)
Dim iPos1,iPos2,iPos3,iPos4,R,G,B
	ConvertColorStrToBin = 0
	iPos1 = InStr(sColor, "(")
	If iPos1 <= 0 Then Exit Function
	iPos2 = InStr(iPos1 + 1, sColor, ",")
	If iPos2 <= 0 Then Exit Function
	R = Trim( Mid(sColor, iPos1 + 1, iPos2 - iPos1 - 1) )
	If Not IsNumeric(R) Then Exit Function
	iPos3 = InStr(iPos2 + 1, sColor, ",")
	If iPos3 <= 0 Then Exit Function
	G = Trim( Mid(sColor, iPos2 + 1, iPos3 - iPos2 - 1) )
	If Not IsNumeric(G) Then Exit Function
	iPos4 = InStr(iPos3 + 1, sColor, ")")
	If iPos4 <= 0 Then Exit Function
	B = Trim( Mid(sColor, iPos3 + 1, iPos4 - iPos3 - 1) )
	If Not IsNumeric(B) Then Exit Function
	ConvertColorStrToBin = CInt(R) + CInt(G) * 256 + CInt(B) * 65536
End Function

'==============================================================
' Преобразование цвета в яркость  //
'==============================================================
Function ConvertColorStrToBrightness(ByVal sColor)
	ConvertColorStrToBrightness = 0
	iPos1 = InStr(sColor, "(")
	If iPos1 <= 0 Then Exit Function
	iPos2 = InStr(iPos1 + 1, sColor, ",")
	If iPos2 <= 0 Then Exit Function
	R = Trim( Mid(sColor, iPos1 + 1, iPos2 - iPos1 - 1) )
	If Not IsNumeric(R) Then Exit Function
	iPos3 = InStr(iPos2 + 1, sColor, ",")
	If iPos3 <= 0 Then Exit Function
	G = Trim( Mid(sColor, iPos2 + 1, iPos3 - iPos2 - 1) )
	If Not IsNumeric(G) Then Exit Function
	iPos4 = InStr(iPos3 + 1, sColor, ")")
	If iPos4 <= 0 Then Exit Function
	B = Trim( Mid(sColor, iPos3 + 1, iPos4 - iPos3 - 1) )
	If Not IsNumeric(B) Then Exit Function
	ConvertColorStrToBrightness = 0.3*CInt(R) + 0.59*CInt(G) + 0.11*CInt(B)	 
End Function

'==============================================================
' Возвращает True, если цвета идентичны - напр. (10,10,10) и (10 , 10, 10 ) //
'==============================================================
Function is_equal_colors(ByVal sColor1, ByVal sColor2)
	sColor1 = Replace(sColor1, " ", "")
	sColor2 = Replace(sColor2, " ", "")
	is_equal_colors = ( sColor1 = sColor2 )
End Function

'==============================================================
' Преобразование числа в двоичный формат //
'==============================================================
Function DecToBin( lValue )
	Dim val, bin, i
	DecToBin = ""
	If Not IsNumeric(lValue) Then Exit Function
	val = Oct(lValue)
	bin = ""
	For i = 1 To Len(val)
		Select Case Mid(val, i, 1)
		  Case "0"
			bin = bin & "000"
		  Case "1"
			bin = bin & "001"
		  Case "2"
			bin = bin & "010"
		  Case "3"
			bin = bin & "011"
		  Case "4"
			bin = bin & "100"
		  Case "5"
			bin = bin & "101"
		  Case "6"
			bin = bin & "110"
		  Case "7"
			bin = bin & "111"
		End Select
	Next
	DecToBin = CStr( CLng( bin ) )
End Function

'==============================================================
' Преобразование числа из двоичного формата в десятичный //
' аргумент - строковая переменная //
'==============================================================
Function BinToDec( sValue )
	Dim i, m, val, bit
	BinToDec = Empty
	If Not IsNumeric(sValue) Then Exit Function
	m = 1
	val = 0
	For i = Len(sValue) To 1 Step -1
		Select Case Mid(sValue, i, 1)
		  Case "0"
			bit = 0
		  Case "1"
			bit = 1
		  Case Else
			Exit Function
		End Select
		val = val + bit * m
		m = m * 2
	Next
	BinToDec = val
End Function

'==========================================================
' Чтение и установка проперти для активного вью //
'==========================================================
Function GetViewProp(sPropName)
	Dim objDoc, objView
	GetViewProp = ""
	Set objDoc = Docs.GetActiveDocument("Image")
	If Docs.IsPointerNull( objDoc ) Then Exit Function
	Set objView = objDoc.GetActiveView()
	If Docs.IsPointerNull( objView ) Then Exit Function
	Set objViewDisp = objView.GetViewDispatch()
	If Docs.IsPointerNull( objViewDisp ) Then Exit Function
	GetViewProp = objViewDisp.GetProperty (sPropName)
	Set objViewDisp = Nothing
	Set objView = Nothing
	Set objDoc = Nothing
End Function

Sub SetViewProp(sPropName, vProvValue)
	Dim objDoc, objView
	Set objDoc = Docs.GetActiveDocument("Image")
	If Docs.IsPointerNull( objDoc ) Then Exit Sub
	Set objView = objDoc.GetActiveView()
	If Docs.IsPointerNull( objView ) Then Exit Sub
	Set objViewDisp = objView.GetViewDispatch()
	If Docs.IsPointerNull( objViewDisp ) Then Exit Sub
	objViewDisp.SetProperty sPropName, vProvValue
	Set objViewDisp = Nothing
	Set objView = Nothing
	Set objDoc = Nothing
End Sub

'==========================================================
' Установка проперти для всех активных вью (имеет смысл при разделенном окне) //
'==========================================================
Sub SetAllViewsProp(sPropName, vProvValue)
	Dim objDoc, objView, i
	Set objDoc = Docs.GetActiveDocument("Image")
	If Docs.IsPointerNull( objDoc ) Then Exit Sub
	For i = 0 To objDoc.GetViewsCount - 1
		Set objView = objDoc.GetView(i)
		If Not Docs.IsPointerNull( objView ) Then
			Set objViewDisp = objView.GetViewDispatch()
			If Not Docs.IsPointerNull( objViewDisp ) Then _
			  objViewDisp.SetProperty sPropName, vProvValue
		End If
	Next
	Set objViewDisp = Nothing
	Set objView = Nothing
	Set objDoc = Nothing
End Sub

'==========================================================
' Коррекция (растягивание) изображения для устройств с неквадратными пикселами //
'==========================================================
Sub XYImageCorrection
	Dim dXYRatio, DeleteFilterArgsOld, sSec
	Dim img, x, y

	Set img = Objects.ActiveImage
	If Not Docs.IsPointerNull(img) Then
		If ObjectGetValue(img, "\Input\PixelAspectCorrection", 0) <> 1 Then

			sSec = "\Input\" & Data.GetDefValue ("\Input\Device", "Device 1") & "\PixelAspectRatio"
			dXYRatio = Data.GetDefValue (sSec, 1)

			Call ObjectSetValue(img, "\Input\PixelAspectRatio", dXYRatio)
			Call ObjectSetValue(img, "\Input\PixelAspectCorrection", 1)

			x = img.GetWidth
			y = img.GetHeight
			DeleteFilterArgsOld = Data.GetValue ("\General\DeleteFilterArgs")
			Data.SetValue "\General\DeleteFilterArgs", 1

			'растягиваем по большей стороне //
			If dXYRatio > 1 Then
				Resize x, CLng( y * dXYRatio )
			ElseIf dXYRatio < 1 Then
				Resize CLng( x / dXYRatio ), y
			End If
			Data.SetValue "\General\DeleteFilterArgs", DeleteFilterArgsOld

		End If
	End If
	Set img = Nothing
End Sub

'==========================================================
' Отмена коррекции (растягивания) изображения для устройств с неквадратными пикселами //
'==========================================================
Sub XYImageCorrectionUndo
	Dim dXYRatio, DeleteFilterArgsOld, sSec
	Dim img, x, y

	Set img = Objects.ActiveImage
	If Not Docs.IsPointerNull(img) Then
		If ObjectGetValue(img, "\Input\PixelAspectCorrection", 0) <> 0 Then

			dXYRatio = ObjectGetValue(img, "\Input\PixelAspectRatio", 1)

			Call ObjectSetValue(img, "\Input\PixelAspectCorrection", 0)

			x = img.GetWidth
			y = img.GetHeight
			DeleteFilterArgsOld = Data.GetValue ("\General\DeleteFilterArgs")
			Data.SetValue "\General\DeleteFilterArgs", 1

			'сжимаем по большей стороне //
			If dXYRatio > 1 Then
				Resize x, CLng( y / dXYRatio )
			ElseIf dXYRatio < 1 Then
				Resize CLng( x * dXYRatio ), y
			End If
			Data.SetValue "\General\DeleteFilterArgs", DeleteFilterArgsOld

		End If
	End If
	Set img = Nothing
End Sub

Function CurrDocType()
	CurrDocType = ""
	Set doc = Docs.ActiveDocument()
	If not Docs.IsPointerNull(doc) Then
		CurrDocType = doc.GetDocType()
		Set doc = Nothing
	End If
End Function

Function GetParamUserName(key)
	Dim i,tmp
	GetParamUserName = ""
	tmp = Data.GetSection()
	Data.SetSection "\measurement\parameters"
	For i=0 To Data.GetEntriesCount-1
		ParamName = Data.GetEntryName(i)
		x = Cdbl(Data.Getvalue ("\measurement\parameters\" + ParamName + "\Key"))
		If x = Cdbl(key) Then
			GetParamUserName = Data.Getvalue ("\measurement\parameters\" + ParamName + "\UserName")
			Data.SetSection tmp
			exit Function
		End If
	Next
	Data.SetSection tmp
	If GetParamUserName = "" Then
		If key > 1999 And key < 3000 Then 
			GetParamUserName = Docs.LoadString ("Manual measurements")
		Else
			GetParamUserName = Docs.LoadString ("Unknown parameter")
		End If
	End If
End Function

Function GetParamMainName(key)
	Dim i,tmp
	GetParamMainName = ""
	tmp = Data.GetSection()
	Data.SetSection "\measurement\parameters"
	a = Data.GetEntriesCount
	For i=0 To a-1
		ParamName = Data.GetEntryName(i)
		x = Data.Getvalue ("\measurement\parameters\" + ParamName + "\Key")
		If x = CLng(key) Then
			GetParamMainName = ParamName
			Data.SetSection tmp
			exit Function
		End If
	Next
	Data.SetSection tmp
End Function

Function GetParamGraphicsName(key)
	Dim tmp,a,x,ParamName,i
	GetParamGraphicsName = ""
	tmp = Data.GetSection()
	Data.SetSection "\measurement\parameters"
	a = Data.GetEntriesCount
	For i=0 To a-1
		ParamName = Data.GetEntryName(i)
		x = Cdbl(Data.Getvalue ("\measurement\parameters\" + ParamName + "\Key"))
		If x = Cdbl(key) Then
			GetParamGraphicsName = Data.Getvalue ("\measurement\parameters\" + ParamName + "\Graphics")
			Data.SetSection tmp
			exit Function
		End If
	Next
	Data.SetSection tmp
End Function


Function GetParamKey(sUserName)
	Dim i,shell, k
	GetParamKey = -1
	tmp = Data.GetSection()
	Data.SetSection "\measurement\parameters"
	a = Data.GetEntriesCount
	For i=0 To a-1
		ParamName = Data.GetEntryName(i)
		UserName = Data.Getvalue ("\measurement\parameters\"+ParamName+"\UserName")
		If ParamName = sUserName or UserName = sUserName Then
			GetParamKey = Data.Getvalue ("\measurement\parameters\" + ParamName + "\Key")
			Data.SetSection tmp
			exit Function
		End If
	Next
	Data.SetSection tmp
	If GetParamKey = -1 Then MsgBox "Parameter is absent"
End Function

Function GetParamCoeff(key)
	GetParamCoeff = Application.GetMeasureParamCoef(key,Data)
	If GetParamCoeff = 0 Then GetParamCoeff = 1
End Function

'==========================================================
'	Удаление всех объектов данного типа, кроме указанного, если "" то все 
'==========================================================
Sub DelObjects(sType, sName)
	lPos = Objects.GetFirstObjectPos(sType)
	while lPos <> 0
		Set obj = Objects.GetObject(sType, lPos)
		lPos = Objects.GetNextObjectPos(sType,lPos)
		If obj.Name <> sName Then Objects.RemoveObject obj
		Set obj = Nothing
	wend
End Sub


'==========================================================
' блок скрытия и показа тулбаров и докбаров //
' (вынесен из скриптов HideDockBars и ShowDockBars) //
' sSec - секция в шелдате для записи состояния тулбаров и докбаров //
'==========================================================
Data.SetValue "\DockBars\WasHide", 0

Sub HideDockBars_main(sSec)
'	MsgBox "HideDockBars_main(" & sSec & ")"
	Dim old_lock, strDBrActiveDB
	Dim DBarCount, strDBrBar, strDBrActiveTB, TBarCount, strDBrTBName, isVisible

	If sSec = "" Then sSec = "DockBars"
	If Left(sSec, 1) <> "\" Then sSec = "\" & sSec
	If Right(sSec, 1) <> "\" Then sSec = sSec & "\"

	'блокировка повторного вызова //
	If Data.GetDefValue (sSec & "WasHide", 0) Then Data.SetValue sSec & "isPass", True

	If Not Data.GetValue(sSec & "isPass") Then
		old_lock = MainWnd.GetWindowLock()
		MainWnd.SetWindowLock True, False

		strDBrActiveDB = Data.GetValue(sSec & "VisibleDBName")	'Получаем нескрываемые докбары //
		DBarCount = ToolBars.GetDockBarsCount		'Скрываем докбары //
		For i = 0 To DBarCount - 1
			strDBName = ToolBars.GetDockBarName(i)
			If strDBName = "" Then strDBName = "no name"
			isVisible = ToolBars.IsDockBarVisible(i)
			strDBrBar = sSec & "Bars\" + strDBName
			If Data.GetDefValue(sSec & "CloseFishBar", 0) Or _
			  strDBName <> "FishContextViewer" Then
				Data.Setvalue strDBrBar, isVisible			'Иначе - текущее состояние //
				If InStr(strDBrActiveDB, "(" & strDBName & ")") Then	'Если докбар нескрываемый //
					ToolBars.ShowDockBar i, 1
				Else
					If ToolBars.IsDockBarVisible(i) Then ToolBars.ShowDockBar i, 0	'Гасим все остальные //
				End If
			End If
		Next
		If Data.GetDefValue(sSec & "noAdvancedMode", 0) Then		'Для непродвинутых конфигураций //
			strDBrActiveTB = Data.GetValue(sSec & "VisibleTBName")	'Получаем нескрываемые тулбары //
			TBarCount = ToolBars.GetBarsCount
			For i = 0 To TBarCount - 1								'Скрываем тулбары //
				strDBrTBName = ToolBars.GetBarName(i)
				If strDBrTBName = "" Then strDBrTBName = "no name"
				isVisible = ToolBars.IsBarVisible(i)
				strDBrBar = sSec & "TBars\" + strDBrTBName
				If InStr(strDBrTBName, ".") And Not isVisible Then
					Data.Setvalue strDBrBar, 2					'Если тулбар встроенный и неактивен //
				Else
					Data.Setvalue strDBrBar, isVisible			'Иначе - текущее состояние //
					bDisableFormShow = Data.GetDefValue ("\FormManager\DisableFormShow", 0)
					If InStr(strDBrActiveTB, "(" & strDBrTBName & ")") And _	'Если тулбар нескрываемый //
					  bDisableFormShow = 0 Then									'и только если форма показывается //
						ToolBars.ShowBar i, 1
					Else
						If Not ToolBars.IsOutlookToolBar(i) Then ToolBars.ShowBar i, 0	'Гасим все остальные //
					End If
				End If
			Next
			Data.SetValue sSec & "MainFrame\ShowPopupMenuOld", Data.GetValue ("\MainFrame\ShowPopupMenu")
			Data.SetValue "\MainFrame\ShowPopupMenu", 0		'Отключаем контекстное меню панелей инстр. //
		End If
		ActionManager.SelectAdd 0

		MainWnd.SetWindowLock old_lock, Not old_lock
	End If

	Data.SetValue sSec & "isPass", False
	Data.SetValue sSec & "VisibleDBName", ""
	Data.SetValue sSec & "VisibleTBName", ""
	Data.SetValue sSec & "CloseFishBar", 0
	Data.SetValue sSec & "WasHide", 1
End Sub

Sub ShowDockBars_main(sSec)
'	MsgBox "ShowDockBars_main(" & sSec & ")"
	Dim old_lock, i,j, DBName
	Dim DBarCount, TBarCount, intChk, isVisible

	If sSec = "" Then sSec = "DockBars"
	If Left(sSec, 1) <> "\" Then sSec = "\" & sSec
	If Right(sSec, 1) <> "\" Then sSec = sSec & "\"

	If Not Data.GetValue(sSec & "isPass") Then
		old_lock = MainWnd.GetWindowLock()
		MainWnd.SetWindowLock True, False

		DBarCount = ToolBars.GetDockBarsCount	'Восстанавливаем докбары //
		Data.SetSection sSec & "Bars"
		For i = 0 To Data.GetEntriesCount - 1
			Data.SetSection sSec & "Bars"
			DBName = Data.GetEntryName(i)
			intChk = Data.Getvalue (sSec & "Bars\" + DBName)
			If DBName = "no name" Then DBName = ""
			For j = 0 To DBarCount - 1
				If ToolBars.GetDockBarName(j) = DBName Then
					isVisible = ToolBars.IsDockBarVisible(j)
					If intChk Then
						If isVisible = 0 Then ToolBars.ShowDockBar j, 1
					Else
						If isVisible <> 0 Then ToolBars.ShowDockBar j, 0
					End If
					Exit For
				End If
			Next
		Next

		If Data.GetDefValue(sSec & "noAdvancedMode", 0) Then	'Для непродвинутых конфигураций //
			TBarCount = ToolBars.GetBarsCount	'Восстанавливаем тулбары //
			Data.SetSection sSec & "TBars"
			For i = 0 To Data.GetEntriesCount - 1
				Data.SetSection sSec & "TBars"
				TBName = Data.GetEntryName(i)
				intChk = Data.Getvalue (sSec & "TBars\" + TBName)
				If TBName = "no name" Then TBName = ""
				For j = 0 To TBarCount - 1
					If ToolBars.GetBarName(j) = TBName Then
						isVisible = ToolBars.IsBarVisible(j)
						If intChk = 0 Then
							If isVisible <> 0 Then ToolBars.ShowBar j, 0
						ElseIf intChk = 2 Then
							'Пропуск, если тулбар встроенный и был неактивен //
						Else
							If isVisible = 0 Then ToolBars.ShowBar j, 1
						End If
						Exit For
					End If
				Next
			Next
		'Восстанавливаем контекстное меню панелей инстр. //
		Data.SetValue "\MainFrame\ShowPopupMenu", Data.GetValue (sSec & "MainFrame\ShowPopupMenuOld")
		End If

		MainWnd.SetWindowLock old_lock, Not old_lock
	End If
	Data.SetValue sSec & "WasHide", 0
End Sub


'###############################################################
'#######################    D E B U G    #######################
'###############################################################

Dim last_timer_value
'==========================================================
'Пишем строку в лог //
'Лог - в корне программы, указанный путь игнорируем //
'==========================================================
Sub SaveLog(ByVal sFileName, ByVal sString)
	Const ForAppending = 8
	Dim fso, f, timer_value, sTimer
	Set fso = CreateObject("Scripting.FileSystemObject")
	timer_value = Timer
	If last_timer_value > 0 Then
		sTimer = Int( (timer_value - last_timer_value) * 1000 ) & "mc"
	Else
		sTimer = ""
	End If
	last_timer_value = timer_value
	sFileName = Data.GetValue("\Paths\CurrentPath") & fso.GetFileName(sFileName)
	Set f = fso.OpenTextFile(sFileName, ForAppending, True)
	f.WriteLine TimeValue(Now) & " " & sTimer & vbTab & sString
	f.Close
End Sub

'==========================================================
'Стираем лог //
'Лог - в корне программы, указанный путь игнорируем //
'==========================================================
Sub ClearLog(ByVal sFileName)
	Const ForWriting = 2
	Dim fso, f
	Set fso = CreateObject("Scripting.FileSystemObject")
	last_timer_value = 0
	sFileName = Data.GetValue("\Paths\CurrentPath") & fso.GetFileName(sFileName)
	Set f = fso.OpenTextFile(sFileName, ForWriting, True)
	f.Write ""
	f.Close
End Sub
