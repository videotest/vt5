Option Explicit 

Dim id
id = "Init_Master"

Call init_after_install

Dim sAction, sClassifier, iDeleteFilterArgs, iLoopAction,gStartTime,gLoopTime
Dim iChangeClass, sDefaultClass, bExit 
Dim frmInfoCtrl
Dim iTickCount, iStepX
Dim gRec, g_ExistClassifier
Dim RunMethod, iPreProcess, bNeedShowMtdPanel
RunMethod = 0
Dim sVT
sVT = Data.GetValue("\General\DefaultTitle")
MainWnd.Title = sVT
Dim strPreviousView
Dim bNoParam
bNoParam = 0
Dim gPassNo		'номер прохода в цикле методики //
gPassNo = 0
bExit = false
'событие OnRunMtdComplete возникло при записи методики - не выполняем Hide/ShowDockBars //
Dim gbWas_OnRunMtdComplete_EventOnRecording
gbWas_OnRunMtdComplete_EventOnRecording = False

Dim strProgramName	' используется для определения своих файлов //
strProgramName = Data.GetValue("\General\ProgramName")

sDefaultClass = Docs.LoadString("FromDoc") + ".class"

DataFix()
ClearManualMeasParams()

gStartTime = Timer

Dim isMaster, frmMessage
isMaster = ( strProgramName = "Master" )
Dim lg
Set lg = CreateObject("Scripting.Dictionary")
lg.add 196610,196661	' ср. арифметическое
lg.add 196616,196660	' дисперсия
lg.add 196617,196653	' СКО
lg.add 196618,196656	' мода 
lg.add 196620,196657	' Асимметрия 
lg.add 196621,196658	' эксцесс
lg.add 196622,196659	' коэф вариации
lg.add 196640,196654	' ош среднего
lg.add 196641,196655	' доверит. интервал
lg.add 196642,196643	' Хи-квадрат	

Data.RemoveValue "\StatUI\ChartParams\CustomIntervals"
Data.SetValue "\General\CurrentState", "Master.state"

Data.SetValue "\measurement\ShowProperty",0
'Data.SetValue "\DockBars\NoShowHide",0
Data.SetValue "\DockBars\noAdvancedMode",1
Data.SetValue "\Master\DockBars\noAdvancedMode",1
Data.Setvalue "\Objects\_Small\0\hi",1e+300
Data.Setvalue "\Classes\ResetManualClass",0
Data.Setvalue "\General\SaveStateOnExit" , 1
Data.Setvalue "\measurement\UserParamSettings\CalcUserParamsInCurrUnits" , 1

ShowProp 0
ShowCntxt 0
add_functions
add_functions_db
add_functions_object_keys
MethodOpen "\General\Pane0", 1

'''''''''''''''''''''''''''''''''''''''''''''''
'Master_states()
'''''''''''''''''''''''''''''''''''''''''''''''

Data.RemoveValue "\Classify"

Data.SetValue "\ObjectEditor\DefineMode", 0  'reset add/sub objectDraw mode
Data.RemoveValue "\StatUI\Legend\UserValues"

Data.Setvalue "\StatUI\ChartParams\BarWidth" , 10
Data.Setvalue "\StatUI\SplitterType" , 2
Data.Setvalue "\StatUI\Pane0_Data" , 2
Data.Setvalue "\StatUI\Pane1_Data" , 0
Data.Setvalue "\StatUI\Pane2_Data" , 1
Data.Setvalue "\StatCfg\RebuildStat" , 0

Data.Setvalue "\StatUI\ChartParams\DistributionScript", ""
Data.Setvalue "\StatUI\StatParamArea_PropertyScript", "RunStatGraphDistr"
Data.Setvalue "\StatUI\ChartArea_PropertyScript", "RunStatGraphDistr"
Data.Setvalue "\StatUI\AxisArea_PropertyScript", ""
Data.Setvalue "\StatUI\X_ParamsArea_PropertyScript", ""
Data.Setvalue "\StatUI\Y_ParamsArea_PropertyScript", ""
Data.Setvalue "\StatUI\TableStatArea_PropertyScript", "RunStatGraphDistr"
Data.Setvalue "\StatUI\ChartParams\Axis\X_ShowAxisValues", 1
Data.Setvalue "\StatUI\Enable_ChartArea", 1
Data.Setvalue "\StatUI\Enable_AxisArea", 0
Data.Setvalue "\StatUI\Enable_X_ParamsArea", 0
Data.Setvalue "\StatUI\Enable_Y_ParamsArea", 0
Data.Setvalue "\StatUI\Enable_StatParamArea", 1
Data.Setvalue "\StatUI\Enable_TableStatArea", 1

Data.Setvalue "\StatDependence\ChartArea_PropertyScript", "RunStatGraphDepend"
Data.Setvalue "\StatDependence\AxisArea_PropertyScript", ""
Data.Setvalue "\StatDependence\Y_ParamsArea_PropertyScript", ""
Data.Setvalue "\StatDependence\X_ParamsArea_PropertyScript", ""
Data.Setvalue "\StatDependence\Enable_ChartArea", 1
Data.Setvalue "\StatDependence\Enable_AxisArea", 0
Data.Setvalue "\StatDependence\Enable_X_ParamsArea", 0
Data.Setvalue "\StatDependence\Enable_Y_ParamsArea", 0

'Включение площади и периметра 
Data.Setvalue "\measurement\parameters\Extern Area\Enable" ,1
Data.Setvalue "\measurement\parameters\Full Perimeter\Enable" ,1

'Data.Setvalue "\StatUI\SplitterType" , 0
'Data.Setvalue "\StatUI\Pane0_Data" , 0
'Data.Setvalue "\StatUI\Pane1_Data" , 1
'Data.Setvalue "\StatUI\Pane2_Data" , 2


'=========================
'--  initialize ODensity
Data.RemoveValue "\ODensity"
Data.Setvalue "\ODensity\Method", 255
OpticMeasure.Free
OpticMeasure.Method = 0
iTickCount = 5

gRec = 1
FormManager.ExecuteDockBar2 "InfoCtrl",0,1
FormManager.CreateHideDockBar "Histogram"
FormManager.ExecuteDockBar2 "Message",0,0
gRec = 0

Data.RemoveValue "\StatUI\Legend\UserValues"
If Data.Getvalue ("\StatCfg\ShowInfoCtrl") Then 
	ToolBars.ShowDockBar ToolBars.FindDockNo("InfoCtrl"), 1
Else
	ToolBars.ShowDockBar ToolBars.FindDockNo("InfoCtrl"), 0
End If

ToolsLoadState Data.GetValue ("\General\CurrentState")

Sub ActionState_OnActionRunning (strActionName)
	If gRec Then Exit Sub
	If strActionName <> "add_functions"  Then If strActionName = "MtdRunStop" and GetNameActivImage() <> "" Then FastAverage 1, GetNameActivImage()	'	смещение в конец списка, чтобы методика началась с него (ничего не меняет)
	If strActionName = "MtdRunStop" Then SetImageData "ImageCountFinished", 0
	If sAction = ActionState.GetCurrentAction or FormManager.ModalMode Or FormManager.PageActive Then Exit Sub
	sAction = ActionState.GetCurrentAction
	Select Case strActionName
		Case "MeasManualLine"
		'	SplitWnd
		Case "MeasManualFreeLine"
		'	SplitWnd
		Case "MeasManualSpline"
		'	SplitWnd
		Case "MeasManualCycle2"
		'	SplitWnd
		Case "MeasManualCycle3"
		'	SplitWnd
		Case "MeasManualAngle3Point"
		'	SplitWnd
		Case "MeasManualAngle2Line"
		'	SplitWnd
		Case "MeasManualCount"
		'	SplitWnd
		Case "ObjectRect"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectEllipse"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectFree"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectSpline"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectEllipseFixed"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectRectFixed"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectEllipseDirect"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectRectDirect"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectEditor"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "ObjectMagickStick"
		'	SplitWnd
		'	ShowProp 1
			ReRunActions sAction
		Case "SewManual"
			ShowProp 1
		Case "FreeTransformation"
			ShowProp 1
		Case "SelectRect"
			ShowProp 1
		Case "SelectEllipse"
			ShowProp 1
		Case "SelectArea"
			ShowProp 1
		Case "MagickStick"
			ShowProp 1
		Case "EditFreeLine"
			ShowProp 1
		Case "EditLine"
			ShowProp 1
		Case "EditSplineLine"
			ShowProp 1
		Case "EditCircle"
			ShowProp 1
		Case "EditRect"
			ShowProp 1
		Case "PickColor"
			ShowProp 1
		Case "EditArrow"
			ShowProp 1
		Case "Comment"
			ShowProp 1
			ShowCntxt 1
		Case "Dodge"
			ShowProp 1
			ReRunActions sAction
		Case "Burn"
			ShowProp 1
			ReRunActions sAction
		Case "CompareImages"
			ShowProp 1
		Case Else
	End Select
End Sub

Sub SplitWnd
	Dim img,s,frame
     If CheckSplit()=0 Then
		ActionManager.SyncContext 1
		Set img = Objects.ActiveImage
		If not Docs.IsPointerNull(img) and img.GetColorSystem <> "RGB_AVI" Then
			Set frame = MainWnd.ActiveFrame
			Set s = frame.GetSplitter
			s.Split 1, 1
			s.Split 2, 1
			s.SetViewType 1, 0, "DataView.MeasView"
			s.ActivateView 0, 0, "ImageDoc.ImageView"
			Set img = Nothing
			Set frame = Nothing
		end if
		Set s = Nothing
     End If
End Sub

Function CheckSplit
	Dim img,dd,s
	Set img = Objects.ActiveImage
	If not Docs.IsPointerNull(img) and img.GetColorSystem <> "RGB_AVI" Then
		Set dd = img.GetPrivateNamedData
		s = dd.Getvalue ("\WndSplit")
		If s=0 Then
			dd.SetValue "\WndSplit",1
			CheckSplit = 0
		else
			CheckSplit = 1
		End If
		Set dd = Nothing
	End If
	Set img = Nothing
End Function

Sub ShowCntxt (Show)
	Dim BarNo
	If MethodMan.IsRecording() or MethodMan.IsRunning() Then Exit Sub
	BarNo = ToolBars.FindDockNo ( "ContextViewer" )
	ToolBars.ShowDockBar BarNo , Show
End Sub

Sub ShowProp (Show)
	Dim BarNo
	If MethodMan.IsRecording() or MethodMan.IsRunning() Then Exit Sub
	If CheckProp=0 Then
		BarNo = ToolBars.FindDockNo ( "PropertySheet" )
		ToolBars.ShowDockBar BarNo , Show
	End If
End Sub
Sub ShowPropOneTime
     If Data.GetValue ("\measurement\ShowProperty") <> 1 Then
		ShowProp 1
     End If
	Data.SetValue "\measurement\ShowProperty",1
End Sub
Function CheckProp
	Dim img, dd,s
	If MethodMan.IsRecording() or MethodMan.IsRunning() Then CheckProp = 0
	Set img = Objects.ActiveImage
	If not Docs.IsPointerNull(img) then
		If img.GetColorSystem <> "RGB_AVI" Then
			Set dd = img.GetPrivateNamedData
			s = dd.Getvalue ("\Property")
			If s=0 Then
				dd.SetValue "\Property",1
				CheckProp = 0
			else
				CheckProp = 1
			End If
			Set dd = Nothing
		End If
	End If
	Set img = Nothing
End Function

' открытие документа //
Sub Docs_OnOpenDocument(str_FileName_tmp, obj_OpenedDoc_tmp)
	ActionState.TerminateCurrentAction	
	Dim img,strOpenedDocType
	strOpenedDocType = obj_OpenedDoc_tmp.GetDocType

	If strOpenedDocType = "Image" Then
		ActionManager.FitDoc2Screen
		If Instr(GetCurrentView(),"Print") = 0 Then
			'ActionManager.ZoomNormal
		else
			ActionManager.FitToPageWidth
		End If
		If Instr(LCase(str_FileName_tmp),".vti") <> 0 Then 
			ShowImage
			CalcMeasResult
			ActionManager.FitDoc2Screen
		End If
		Set img = Objects.ActiveImage
		If not Docs.IsPointerNull(img) Then
			if img.GetColorSystem = "RGB_AVI" Then
				ShowProp 1
			End If
			If	Objects.GetObjectCount ("Image")>1 or Objects.GetObjectCount ("Object List")>1 Then
				ShowCntxt 1
			End If
		End If
		Set img = Nothing

'		If Objects.GetSelectedObjectsCount("StatObject")>1 and GetCurrentView() = "StatUI.StatObjectView" Then 
'			Compare "StatObject"
'		End If
'		If Objects.GetSelectedObjectsCount("StatTable")>1 and GetCurrentView() = "StatData.StatTableDependenceView" Then 
'			Compare "StatTable"
'		End If
		
	ElseIf strOpenedDocType = "Database" Then

		'Toolbars.ShowDockBar Toolbars.FindDockNo("ImageBar"), 0

		ActionManager.FitDoc2Screen
	End If
	BlockUnSplitter
End Sub

' создание нового документа //
Sub Docs_OnNewDocument(obj_CreatedDoc_tmp)
	ActionState.TerminateCurrentAction
	Dim objDocData, strCreatedDocType
	strCreatedDocType = obj_CreatedDoc_tmp.GetDocType
'MsgBox ActionState.GetCurrentAction
	If strCreatedDocType = "Image" Then
		ActionManager.FitDoc2Screen
		'ActionManager.ZoomNormal

	ElseIf strCreatedDocType = "Database" Then
		ActionManager.FitDoc2Screen
		ActionManager.ZoomNormal
	End If
	BlockUnSplitter
End Sub

' закрытие документа //
Sub Docs_OnCloseDocument(objClosedDoc, close_permission)
	ActionState.TerminateCurrentAction	
	Dim strState
	If Docs.GetDocumentsCount("Image") = 0 and Docs.GetDocumentsCount("Database") = 1 Then
		strState = Data.GetValue( "\Paths\States" )
		ToolsLoadState strState & "Master.state"
		Data.SetValue "\General\EnableDock", 1
	End If
	If objClosedDoc.GetDocType = "Image" and not Docs.IsPointerNull(frmInfoCtrl) then
		ClearManualMeasParams()
		frmInfoCtrl.edtImg.ValueInt = 0
		frmInfoCtrl.edtObj.ValueInt = 0
	End If	
	'Закрытие бд в момент выполнения методики //
	If objClosedDoc.GetDocType = "Database" And MethodMan.IsRunning() Then MasterModeMethod
	If objClosedDoc.GetDocType = "Database" Then
		Data.Setvalue "\MainFrame\ShowPopupMenu", 1
		MainWnd.UpdateSystemSettings
	End If
End Sub

' активизация документа //
Sub Docs_OnActivateDocument(objActivatedDoc)
	ActionState.TerminateCurrentAction
	Dim strState, strCurrent, img, bImageExist
	strCurrent = Data.GetValue( "\General\CurrentState")
	strState = Data.GetValue( "\Paths\States" )

	Select Case objActivatedDoc.GetDocType
		Case "Image"

			Data.SetValue "\General\EnableDock", 1
			Data.Setvalue "\MainFrame\ShowPopupMenu", 1
			MainWnd.UpdateSystemSettings
			
			If MethodMan.IsRecording() Then
				'здесь включать панели не надо - это сделано в Sub MethodMan_AfterRecordMethodStep(str) //
				'ToolBars.ShowDockBar ToolBars.FindDockNo ( "MethodPanel" ), 1
				'ToolBars.ShowDockBar ToolBars.FindDockNo ( "MetodicsTab" ), 1	
			ElseIf strCurrent <> strState & "Master.state" Then
				If Not MethodMan.IsRunning() Then
					If strCurrent = strState & "Master_db.state" Then _
					  ToolsSaveState strState & "Master_db.state"
				End If

				Freeze &H0
				ToolsLoadState strState & "Master.state"

				'ToolBars.ShowDockBar ToolBars.FindDockNo ( "MethodPanel" ), 1
				'ToolBars.ShowDockBar ToolBars.FindDockNo ( "MetodicsTab" ), 1	
				Freeze 0
			End If

			If StatActive() and Objects.GetSelectedObjectsCount("StatObject")=1 Then InitStat(0)
			Set img = Objects.ActiveImage
			If not Docs.IsPointerNull(img) Then
				bImageExist = true
				If  img.GetColorSystem = "RGB_AVI" Then
				Else
				End If
				Set img = Nothing
			else
				bImageExist = false
			End If

			If MethodMan.IsRunning Then 
				ActionState.SetActionState "SendTo", 0
'				MethodMan.Resume
			End If
			'MsgBox "Docs_OnActivateDocument Image - MethodMan.Resume"

		Case "Database"

			Data.SetValue "\General\EnableDock", 0 
			Data.Setvalue "\MainFrame\ShowPopupMenu", 0
			MainWnd.UpdateSystemSettings

			If MethodMan.IsRecording() Then
				ToolBars.ShowDockBar ToolBars.FindDockNo ( "MethodPanel" ), 0
				ToolBars.ShowDockBar ToolBars.FindDockNo ( "MetodicsTab" ), 0	
				ToolBars.ShowBar 0,0
				ToolBars.ShowBar 1,0
			ElseIf strCurrent <> strState & "Master_db.state" Then

					If strCurrent = strState & "Master.state" Then _
					  ToolsSaveState strState & "Master.state"

				Data.Setvalue "\MainFrame\NotifyInMainLoop" ,1
				iLoopAction = 3				
			End If

	End Select

End Sub

Sub ReRunActions(sAction)
	If ActionState.GetCurrentAction <> sAction Then	ActionState.RunInteractive  sAction
End Sub


Sub ActionState_OnActionComplete(strActionName, intActionResult)
	Dim bNeedClassify, fStep,mn,mx,n

	bNeedClassify = False
	If gRec Then Exit Sub
	If strActionName = "Freeze" Then Exit Sub

	If strActionName = "RemoveParam" Then 
		ClearManualMeasParams()
	ElseIf strActionName = "CalcMeasResult" Then
		MeasureTime()
	ElseIf strActionName = "MeasureBin" Then
		If IsNotAVI() Then MeasureTime()
	ElseIf strActionName = "ShowStatChartView" _
	  or strActionName = "ShowStatTableView" _
	  or strActionName = "ShowStatLegendView" Then
		Data.Setvalue "\StatUI\Views" , ObjectGetValue (GetStatObj(), "\StatUI\Views","3")
'	ElseIf strActionName = "CreateStatObject" _
'	  or strActionName = "ShowStatView" Then
'		InitStat(1)
	ElseIf strActionName = "ObjectSelect" Then
		If GetCurrentView() = "StatUI.StatObjectView" Then InitStat(0)
	End If
	
	If FormManager.PageActive Then Exit Sub		'выходим при запущенной форме //

	If strActionName = "ObjectRect" _
	  or strActionName = "ObjectEllipse" _
	  or strActionName = "ObjectFree" _
	  or strActionName = "ObjectSpline" _
	  or strActionName = "ObjectEllipseFixed" _
	  or strActionName = "ObjectRectFixed" _
	  or strActionName = "ObjectEllipseDirect" _
	  or strActionName = "ObjectRectDirect" _
	  or strActionName = "ObjectEditor" _
	  or strActionName = "ObjectMagickStick" _
	  or strActionName = "ObjectScissors" _
	  or strActionName = "MeasManualLine" _
	  or strActionName = "MeasManualFreeLine" _
	  or strActionName = "MeasManualSpline" _
	  or strActionName = "MeasManualCycle2" _
	  or strActionName = "MeasManualCycle3" _
	  or strActionName = "MeasManualAngle3Point" _
	  or strActionName = "MeasManualAngle2Line" _
	  or strActionName = "CutDocBySel" _
	  or strActionName = "ObjectDeleteSelection" Then
		If intActionResult = 1 Then bNeedClassify = True
	ElseIf strActionName = "ObjectCutFrame" Then
		If intActionResult = 1 And isDocImage() Then bNeedClassify = True
	ElseIf strActionName = "InputImage" _
	  Or strActionName = "InputImageInCurrentDoc" _
	  Or strActionName = "ObjectLoad" _
	  Or strActionName = "EditPaste" _
	  Or strActionName = "SendTo" Then
		ActionManager.FitDoc2Screen
		If strActionName <> "InputImage" _
		  and (Objects.GetObjectCount ("Image") > 1 or Objects.GetObjectCount ("Object List") > 1) Then
			ShowCntxt 1
		End If
	ElseIf strActionName = "MtdCreateMethod" and intActionResult = 1 Then
		FormManager.ExecuteModal "MethodSetup"
		gRec = 1
		MethodMan.Record() 	
		gRec = 0
	ElseIf strActionName = "BinEditFreeLine" and intActionResult = 0 and MethodMan.IsRecording() Then
		ActionManager.BinEditFreeLine
	End If

	If bNeedClassify And Not IsPhasesOL() Then
		gRec = 1
		ActionState.BeginGroupUndo2 "reclassify", 1		'цепляем предыдущую акцию //
		bNoParam = 0
		ClassifyObjectList 
		'ObjectFilter "\Objects\_Small", 0
		ActionState.EndGroupUndo2 "reclassify", 1
		gRec = 0
	End If
	If strActionName = "ClassifyObjectList" and Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"ClassifierInfo","DivisionType",0)=1 Then
		gRec = 1
		Application.WritePrivateProfileString Data.Getvalue ("\Classes\ClassFile"),"Classes","ClassCount",1
		CalcMinMax mn,mx
		fStep = VtDbl(Application.GetPrivateProfileString (Data.Getvalue ("\Classes\ClassFile"),"ClassifierInfo","DivisionValue","1"))
		n = Int((mx-mn)/fStep+.999999999)
		Application.WritePrivateProfileString Data.Getvalue ("\Classes\ClassFile"),"Classes","ClassCount",n
		ClassifyObjectList
		gRec = 0
	End If
End Sub

Function GetNameNoExt(sFullPath)
	Dim iPos, iPos2
	GetNameNoExt = ""
	If sFullPath = "" Then Exit Function
	iPos = InstrRev(sFullPath, ".")
	If iPos Then
		GetNameNoExt = Mid(sFullPath, 1, iPos-1 )
	else
		GetNameNoExt = sFullPath
	End If
End Function

Function ClassifierType ( sCls )
	Dim param
	ClassifierType = "---"
	If sCls = "" Then sCls = Data.Getvalue("\Classes\ClassFile")
	If sCls = "" Then exit Function
	Select Case Application.GetPrivateProfileString(sCls,"General","ClassifyProgID","")
		Case "ClassBase.ManualClassifier"
			param = Application.GetPrivateProfileString(sCls,"KeysInfo","KeysEnum","")
			If param = "" Then
				ClassifierType = "F"			
			Else
			ClassifierType = "M"
			End If
		Case "ClassBase.AutomaticClassifier"
			ClassifierType = "A"
		Case "Classifiers.StatClassifier"
			ClassifierType = "S"
		Case "Neuro.NeuroClassifier"
			ClassifierType = "N"
	End Select
End Function

Function GetStatTable()
	Dim pos
	Set GetStatTable = Objects.GetActiveObject( "StatTable" )
	If Docs.IsPointerNull(GetStatTable) Then
		pos = Objects.GetFirstObjectPos("StatTable")
		If pos <> 0 Then
			Set GetStatTable = Objects.GetObject("StatTable", pos)
		End If
	End If
End Function

Function GetNameStatTableFromID(id)
	Dim lpos, ObjType,obj
	ObjType = "StatTable"
	lPos = Objects.GetFirstObjectPos( ObjType )
	While lPos <> 0
		If id = Objects.GetObjectKey( ObjType, lPos ) Then
			Set obj = Objects.GetObject( ObjType, lPos )
			GetNameStatTableFromID = obj.Name
			Set obj = Nothing
			Exit Function
		End If
		lPos = Objects.GetNextObjectPos( ObjType, lPos )
	Wend 
End Function

Function GetNameStatTable()
	Dim obj 
	GetNameStatTable = ""
	Set obj = GetStatTable()
	If not Docs.IsPointerNull(obj) Then
		GetNameStatTable = obj.Name
		Set obj = Nothing
	End If
End Function

Function GetOwnIDStatTable()
	Dim obj 
	Set obj = GetStatObj()
	If not Docs.IsPointerNull(obj) Then
		GetOwnIDStatTable = ObjectGetValue(obj, "\StatUI\OwnStatTable", "" )
		set obj = Nothing
	End If
End Function

Function GetStatObj()
	Dim POS
	Set GetStatObj = Objects.GetActiveObject( "StatObject" )
	If Docs.IsPointerNull(GetStatObj) Then
		pos = Objects.GetFirstObjectPos("StatObject")
		If pos <> 0 Then
			Set GetStatObj = Objects.GetObject("StatObject", pos)
		End If
	End If
End Function

Function GetNameStatObj()
	Dim obj 
	GetNameStatObj = ""
	Set obj = GetStatObj()
	If not Docs.IsPointerNull(obj) Then
		GetNameStatObj = obj.Name
		Set obj = Nothing
	End If
End Function

Sub RebuildStat()
	Dim objStaTable,ol,lpos,ClsType,str,objData,objStat,sSelect
	If gRec Then exit Sub 
	gRec = 1
	Freeze &H0
	Data.RemoveValue "\Classify"
	bNoParam = 0 
	ClsType = ClassifierType (Data.Getvalue ("\Classes\ClassFile"))
	Data.Setvalue "\StatUI\CalcForGroups" , ObjectGetValue (GetStatTable(),"\StatUI\CalcForGroups", "")
	Data.Setvalue "\StatUI\CalcForAllClasses" , ObjectGetValue (GetStatTable(),"\StatUI\CalcForAllClasses", "")
	Data.Setvalue "\StatUI\CalcForRelativeClasses" , ObjectGetValue (GetStatTable(),"\StatUI\CalcForRelativeClasses", "")
	Select Case ClsType
		Case "F"
 			CreateStatObject GetNameStatTable(), GetNameStatObj(),-1,0,1,2
			MClassifierToDoc("F")
			ShowStatView
			gRec = 0
			UpdateStatUI()
			Freeze 0
			Exit Sub
		Case "A"
			If Data.Getvalue ("\StatUI\ChartParams\Axis\X_AxisType")=1 Then
				Data.Setvalue "\StatUI\ChartParams\Axis\X_ParamKey" , Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"KeysInfo","KeysEnum","")
				Data.Setvalue "\StatUI\ChartParams\XParamName" , GetParamUserName(Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"KeysInfo","KeysEnum",""))
			Else
				Data.Setvalue "\StatUI\ChartParams\XParamName" , Docs.LoadString("Classes")
			End If
		Case Else
	End Select
	lPos = Objects.GetFirstObjectPos("Object List")
	If lPos <> 0 Then
		Set ol = Objects.GetObject("Object List",lPos) 
		ClassifyObjectList  "", ol.Name
		Set ol = Nothing	
		lPos = Objects.GetNextObjectPos("Object List", lPos)	
		while lpos<>0
			Set ol = Objects.GetObject("Object List",lPos)
			ClassifyObjectList  "", ol.Name
			Set ol = Nothing
			lPos = Objects.GetNextObjectPos("Object List", lPos)	
		Wend
	End If	
	If GetNameStatTable() = "" Then 
		ClassifyObjectList
		gRec = 0
		Freeze 0
		Exit Sub
	End If
	If Data.Getvalue("\Classes\ClassFile") = "" Then Data.Setvalue"\Classes\ClassFile",sClassifier
	If ClsType = "A"  Then 
		If Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"ClassifierInfo","UseRange","0") = 0  Then
			Data.Setvalue "\StatCfg\AxisXAuto",1
		else
			Data.Setvalue "\StatCfg\AxisXAuto",0
	End If	
	End If
	
	ClassifyObjectList "", GetNameStatTable()
	
	'Data.RemoveValue "\StatUI\ChartParams\CustomIntervals"
	str = GetFileName(Data.Getvalue("\Classes\ClassFile")) + ".class"
	str = str +"\"+cstr(Data.Getvalue("\StatUI\ChartParams\Axis\X_ParamKey"))
	Data.CopyNamedData Data,"\Classify\"+str,"\StatUI\ChartParams\CustomIntervals", 1
	AreaMeasured()
	Objects.SelectObject GetStatObj(), 0
	load_entry GetStatNdata(), "\StatCfg"
	CreateStatObject GetNameStatTable(), GetNameStatObj(),-1,0,1,2
	save_entry GetStatNdata(), "\StatCfg"
	If InStr(GetCurrentView(),"ImageDoc") Then
		If InStr(GetCurrentView(),"ImageDoc.SrcView") Then ShowImage		
	Else
		If InStr(GetCurrentView(),"MeasView")=0 Then ShowStatView		
	End If
	gRec = 0

	Set objStat = GetStatObj()
	If Not Docs.IsPointerNull(objStat) Then
		Set objData = objStat.GetPrivateNamedData
		save_value objData, "\StatUI"
	End If
	Set objStat = Nothing
	Select Case ClsType
		Case "A"
			AClassifierToDoc()
		Case "M"
			MClassifierToDoc("M")
	End Select
	Set objStaTable = Nothing
	UpdateStatUI()
	MainWnd.UpdateSystemSettings
	ObjectSetValue GetStatObj(), "\StatCfg\RebuildStat",1
	Freeze 0
End Sub

Function IfStat()
	Set obj = Objects.GetActiveObject( "StatObject" )
	If Docs.IsPointerNull(obj) Then
		IfStat = false
	else
		IfStat = true
	End If
	Set obj = Nothing
End Function

Sub GetStatParam()
	Dim objStat,a,n,i,ParamID,v,nameOD,str,DataID,sNewID,objData,ExprString
	Set objStat = GetStatObj()
	If not Docs.IsPointerNull(objStat) Then
		Set objData = objStat.GetPrivateNamedData
		objData.SetSection "\StatUI\StatParams"
		a = objData.GetEntriesCount
		n = 0
		For i=0 To a-1
			objData.SetSection "\StatUI\StatParams"
			ParamID  = objData.GetEntryName(i)
			If IsNumeric( ParamID ) Then
				If CLng(ParamID) < 262147 Then
					v = objData.Getvalue ("\StatUI\StatParams\" + ParamID + "\Visible")
					Data.Setvalue "\StatUI\StatParams\" + ParamID + "\Visible" , v
				else
					nameOD = objData.Getvalue ("\StatUI\StatParams\" + ParamID + "\UserName")
					If nameOD = "" Then
						objData.Setvalue "\StatUI\StatParams\" + ParamID+"\UserName", ParamID
					End If
					str = objData.Getvalue ("\StatUI\StatParams\" + ParamID + "\Graphics")
					If str = "" Then
						objData.Setvalue "\StatUI\StatParams\" + ParamID+"\Graphics", objData.Getvalue ("\StatUI\StatParams\" + ParamID + "\UserName")
					End If
					ExprString = objData.Getvalue ("\StatUI\StatParams\" + ParamID + "\ExprString")
'					If ExprString <>"" Then
					If 1 Then
						DataID = ParamExist( nameOD )
						If DataID > 0 Then
							Data.CopyNamedData objData,"\StatUI\StatParams\"+ ParamID, "\StatUI\StatParams\" + DataID, 1
							str = objData.Getvalue ("\StatUI\StatParams\" + ParamID + "\ExprString")
							str = Replace (str,ParamID, DataID)
							Data.Setvalue "\StatUI\StatParams\" + DataID + "\ExprString",str
						else
							sNewID = CStr(NewID())
							Data.CopyNamedData objData,"\StatUI\StatParams\"+ ParamID, "\StatUI\StatParams\" + sNewID, 1
							str = objData.Getvalue ("\StatUI\StatParams\" + ParamID + "\ExprString")
							str = Replace (str,ParamID,sNewID)
							Data.Setvalue "\StatUI\StatParams\" + sNewID + "\ExprString",str
						End If
					End If
				End If
			End If
		Next
		Data.CopyNamedData objData, "\StatUI\StatTable", "\StatUI\StatTable", 1
		Data.CopyNamedData objData, "\StatUI\ChartParams", "\StatUI\ChartParams", 1
		Data.CopyNamedData objData, "\StatUI\Legend", "\StatUI\Legend", 1
		'Data.CopyNamedData objData, "\StatCfg", "\StatCfg", 1
	End If
	Set objData = Nothing
	Set objStat = Nothing
End Sub

Sub UpdateStatUI()
	Dim objData,objStat,id
	If gRec Then exit Sub
	Data.RemoveValue "\StatUI\Legend\UserValues"
	CorrectParamList()
	ParamMustOn()
	Set objStat = GetStatObj()
	If Not Docs.IsPointerNull(objStat) Then
		ObjectSetValue objStat, "\StatUI\ChartParams\ChartViewType", 0
		Set objData = objStat.GetPrivateNamedData
		ShowLabels 1
		Set_Y_Scale objStat, 10
		Set_X_Scale objStat
		GridX()
		GridY()
		If Data.Getvalue ("\StatCfg\ShowParam") Then
			Data.Setvalue "\StatUI\Legend\UserValues\EntryName0" , Docs.LoadString ("Parameter")
			Data.Setvalue "\StatUI\Legend\UserValues\EntryValue0" , "  "+GetParamUserName(Data.Getvalue ("\StatUI\ChartParams\Axis\X_ParamKey"))			
			Data.Setvalue "\StatUI\Legend\UserValues\EntryOrder0" , -1
		else
			Data.RemoveValue "\StatUI\Legend\UserValues"
			objData.RemoveValue "\StatUI\Legend\UserValues"
'			Data.Setvalue "\StatUI\Legend\UserValues\EntryName0" , ""
'			Data.Setvalue "\StatUI\Legend\UserValues\EntryValue0" , ""
'			Data.Setvalue "\StatUI\Legend\UserValues\EntryOrder0" , 99
		End If
		id = ObjectGetvalue (GetStatObj(),"\StatUI\OwnStatTable","")
		objData.CopyNamedData Data, "\StatUI", "\StatUI", 1
		objData.CopyNamedData Data, "\StatCfg", "\StatCfg", 1
		ObjectSetvalue GetStatObj(), "\StatUI\OwnStatTable", id
	End If
	Set objData = Nothing
	Set objStat = Nothing
	MainWnd.UpdateViewSettings
End Sub

Function NewID()
	Dim tmp,iTotal,pName,i
	tmp = Data.GetSection()
	Data.SetSection "\StatUI\StatParams\"
	iTotal = Data.GetEntriesCount
	NewID = 262147
	For i=0 To iTotal-1
		pName = Data.GetEntryName(i)
		If pName <> "" and IsNumeric(pName) Then
			If CLng(pName) >= NewID Then
				NewID = CLng(pName)
				NewID = NewID + 1
			End If
		End If
	Next
	Data.SetSection tmp
End Function

Function ParamExist( ParName )
	Dim i,tmp,iTotal,pName,nameSD
	ParamExist = 0
	tmp = Data.GetSection()
	Data.SetSection "\StatUI\StatParams\"
	iTotal = Data.GetEntriesCount
	For i=0 To iTotal-1
		pName = Data.GetEntryName(i)
		If pName <> "" and IsNumeric(pName) Then
			If CLng(pName) >= 262147 Then
				nameSD = Data.Getvalue ("\StatUI\StatParams\" + pName + "\UserName")
				If nameSD = ParName Then
					ParamExist = pName
					Data.SetSection tmp
					exit Function
				End If
			End If
		End If
	Next
	Data.SetSection tmp
End Function

Function GetStatParamID( ParName )
	Dim tmp,iTotal,pName,nameSD
	GetStatParamID = -1
	tmp = Data.GetSection()
	Data.SetSection "\StatUI\StatParams\"
	iTotal = Data.GetEntriesCount
	For i=0 To iTotal-1
		pName = Data.GetEntryName(i)
		If pName <> "" and IsNumeric(pName) Then
			nameSD = Data.Getvalue ("\StatUI\StatParams\" + pName + "\UserName")
			If nameSD = ParName Then
				GetStatParamID = pName
				Data.SetSection tmp
				exit Function
			End If
		End If
	Next
	Data.SetSection tmp
End Function

Function StatActive()
	Dim StatObj 
	Set StatObj = Objects.GetActiveObject( "StatObject" )
	If Docs.IsPointerNull(StatObj) Then
		StatActive = 0
	else
		StatActive = 1
	End If
	Set StatObj = Nothing
End Function

Sub InitStat(first)
	If gRec or GetNameStatObj() = "" Then Exit Sub
	If ObjectGetValue (GetStatObj(), "\StatCfg\RebuildStat","") = cstr(1) Then Exit Sub
	gRec = 1
	GetStatParam()
'	Data.CopyNamedData objData, "\StatUI\StatTable", "\StatUI\StatTable", 1
'	Data.CopyNamedData objData, "\StatUI\Legend", "\StatUI\Legend", 1

	Data.Setvalue "\StatUI\CalcForAllClasses" , ObjectGetValue (GetStatTable(),"\StatCfg\ClassWhat", "")
	Data.Setvalue "\StatUI\CalcForRelativeClasses" , ObjectGetValue (GetStatTable(),"\StatCfg\ClassOn", "")

	If Data.Getvalue ("\StatUI\ChartParams\ChartViewType")=1 Then
		Data.Setvalue "\StatUI\ChartParams\ChartViewType" , 0
		first = 1
	End If
	g_ExistClassifier = 0
	WriteClassifierToFile()
	gRec = 0
	If ClassifierType (Data.Getvalue ("\Classes\ClassFile")) = "M" Then 
		Data.Setvalue "\StatCfg\AxisXAuto", 0
		If OneParamInClasifier()=0 Then Data.Setvalue "\StatUI\ChartParams\Axis\X_AxisType", 0		
		Data.SetValue "\StatUI\ChartParams\Axis\X_UseValueRange", 0
	End If
	If g_ExistClassifier = 0 or first Then
		RebuildStat()
	else
		MainWnd.UpdateViewSettings
	End If
End Sub

Sub AClassifierToDoc()
	Dim objStatData, objStat,sFile,N,i,s
	sFile = Data.Getvalue ("\Classes\ClassFile")
	Set objStat = GetStatObj()
	If Not Docs.IsPointerNull(objStat) and sFile <> "" Then
		Set objStatData = objStat.GetPrivateNamedData
		objStatData.SetValue "\Classifier", sFile
		objStatData.SetValue "\Classifier\General\ClassifyName","Auto"
		objStatData.SetValue "\Classifier\General\ClassifyProgID","ClassBase.AutomaticClassifier"

		objStatData.SetValue "\Classifier\ClassifierInfo\UseRange",_
			Application.GetPrivateProfileString(sFile,"ClassifierInfo","UseRange","0")
		objStatData.SetValue "\Classifier\ClassifierInfo\RangeMinVal",_
			Application.GetPrivateProfileString(sFile,"ClassifierInfo","RangeMinVal","0")
		objStatData.SetValue "\Classifier\ClassifierInfo\RangeMaxVal",_
			Application.GetPrivateProfileString(sFile,"ClassifierInfo","RangeMaxVal","0")
		objStatData.SetValue "\Classifier\ClassifierInfo\DivisionType",_
			Application.GetPrivateProfileString(sFile,"ClassifierInfo","DivisionType","0")
		objStatData.SetValue "\Classifier\ClassifierInfo\DivisionValue",_
			Application.GetPrivateProfileString(sFile,"ClassifierInfo","DivisionValue","0")

		objStatData.SetValue "\Classifier\KeysInfo\KeysEnum",_
			Application.GetPrivateProfileString(sFile,"KeysInfo","KeysEnum","0")


		N = Application.GetPrivateProfileString(sFile,"Classes","ClassCount","0")
		objStatData.SetValue "\Classifier\Classes\ClassCount", N
		For i=-1 to N-1
			s = Application.GetPrivateProfileString(sFile,"Classes",CStr(i),"0")
			objStatData.SetValue "\Classifier\Classes"+"\"+CStr(i), s
		Next
	End If
	Set objStat = Nothing
End Sub
Sub MClassifierToDoc(clstype)
	Dim objStatData, objStat,sFile,N,s,i,k,sP,arrParams
	sFile = Data.Getvalue ("\Classes\ClassFile")
	Set objStat = GetStatObj()
	If Not Docs.IsPointerNull(objStat) and sFile <> "" Then
		Set objStatData = objStat.GetPrivateNamedData
		objStatData.SetValue "\Classifier", sFile
		If clstype = "M" Then
		objStatData.SetValue "\Classifier\General\ClassifyName","Manual"
		arrParams = Application.GetPrivateProfileString(sFile,"KeysInfo","KeysEnum","0")
		objStatData.SetValue "\Classifier\KeysInfo\KeysEnum", arrParams
		Else
			objStatData.SetValue "\Classifier\General\ClassifyName","Phases"
		End If
		objStatData.SetValue "\Classifier\General\ClassifyProgID","ClassBase.ManualClassifier"

		N = Application.GetPrivateProfileString(sFile,"Classes","ClassCount","0")
		objStatData.SetValue "\Classifier\Classes\ClassCount", N
		For i=-1 to N-1
			s = Application.GetPrivateProfileString(sFile,"Classes",CStr(i),"0")
			objStatData.SetValue "\Classifier\Classes"+"\"+CStr(i), s
		Next
		If clstype = "F" Then 
			Set objStat = Nothing
			Exit Sub
		End If
		arrParams = Split(arrParams,",")
		For i=0 to Ubound(arrParams)
			sP = CStr(arrParams(i))
			objStatData.SetValue "\Classifier\ParamInfo\"+sP,_
				Application.GetPrivateProfileString(sFile,"ParamInfo",sP,"0")
			For k=0 to N-1
				objStatData.SetValue "\Classifier\KeyData:"+sP+"\"+Cstr(k),_
					Application.GetPrivateProfileString(sFile,"KeyData:"+sP,Cstr(k),"0")
			Next
		Next
	End If
	Set objStat = Nothing
End Sub
Sub WriteAutoClassifierFromDocToFile()
	Dim objStatData, objStat,sFile,str,N,i,FullClassifierName
	Set objStat = GetStatObj()
	If Not Docs.IsPointerNull(objStat) Then
		Set objStatData = objStat.GetPrivateNamedData
		sFile = objStatData.Getvalue ("\Classifier")
		If sFile <> "" Then
			If ExistAutoClassifier(sFile,objStatData) Then
				Data.Setvalue "\Classes\ClassFile", sFile
			else
				FullClassifierName = Data.Getvalue ("\Paths\Classes") + sDefaultClass
				Data.Setvalue "\Classes\ClassFile", FullClassifierName
				FileCopy Data.Getvalue ("\Paths\Classes")+"a.cls", FullClassifierName

				str = objStatData.GetValue ("\Classifier\General\ClassifyName")
				Application.WritePrivateProfileString FullClassifierName, "General", "ClassifyName", str
				str = objStatData.GetValue ("\Classifier\General\ClassifyProgID")
				Application.WritePrivateProfileString FullClassifierName, "General", "ClassifyProgID", str
				str = objStatData.GetValue ("\Classifier\ClassifierInfo\UseRange")
				Application.WritePrivateProfileString FullClassifierName, "ClassifierInfo", "UseRange", str
				str = objStatData.GetValue ("\Classifier\ClassifierInfo\RangeMinVal")
				Application.WritePrivateProfileString FullClassifierName, "ClassifierInfo", "RangeMinVal", str
				str = objStatData.GetValue ("\Classifier\ClassifierInfo\RangeMaxVal")
				Application.WritePrivateProfileString FullClassifierName, "ClassifierInfo", "RangeMaxVal", str
				str = objStatData.GetValue ("\Classifier\ClassifierInfo\DivisionType")
				Application.WritePrivateProfileString FullClassifierName, "ClassifierInfo", "DivisionType", str
				str = objStatData.GetValue ("\Classifier\ClassifierInfo\DivisionValue")
				Application.WritePrivateProfileString FullClassifierName, "ClassifierInfo", "DivisionValue", str
				str = objStatData.GetValue ("\Classifier\KeysInfo\KeysEnum")
				Application.WritePrivateProfileString FullClassifierName, "KeysInfo", "KeysEnum", str
				str = objStatData.GetValue ("\Classifier\Classes\ClassCount")
				Application.WritePrivateProfileString FullClassifierName, "Classes", "ClassCount", str
				N = CLng(str)
				For i=-1 to N-1
					str = objStatData.GetValue ("\Classifier\Classes\"+CStr(i))
					Application.WritePrivateProfileString FullClassifierName, "Classes", CStr(i), str
				next
			End If
		End If
	End If
	Set objStat = Nothing
End Sub
Sub WriteManualClassifierFromDocToFile()
	Dim objStatData, objStat,FullClassifierName,sFile,str,N,i,sP,k,arrParams
	Set objStat = GetStatObj()
	If Not Docs.IsPointerNull(objStat) Then
		Set objStatData = objStat.GetPrivateNamedData
		sFile = objStatData.Getvalue ("\Classifier")
		If sFile <> "" Then
			If ExistManualClassifier(sFile,objStatData) Then
				Data.Setvalue "\Classes\ClassFile", sFile
			else
				FullClassifierName = Data.Getvalue ("\Paths\Classes") + sDefaultClass
				Data.Setvalue "\Classes\ClassFile", FullClassifierName
				FileCopy Data.Getvalue ("\Paths\Classes")+"m.cls", FullClassifierName

				str = objStatData.GetValue ("\Classifier\General\ClassifyName")
				Application.WritePrivateProfileString FullClassifierName, "General", "ClassifyName", str
				str = objStatData.GetValue ("\Classifier\General\ClassifyProgID")
				Application.WritePrivateProfileString FullClassifierName, "General", "ClassifyProgID", str
				str = objStatData.GetValue ("\Classifier\Classes\ClassCount")
				Application.WritePrivateProfileString FullClassifierName, "Classes", "ClassCount", str
				N = CLng(str)
				For i=-1 to N-1
					str = objStatData.GetValue ("\Classifier\Classes\"+CStr(i))
					Application.WritePrivateProfileString FullClassifierName, "Classes", CStr(i), str
				Next
				If objStatData.GetValue ("\Classifier\General\ClassifyName") = "Phases" Then
					Set objStat = Nothing
					Exit Sub
				End If
				str = objStatData.GetValue ("\Classifier\KeysInfo\KeysEnum")
				arrParams = Split(str,",")
				For i=0 to Ubound(arrParams)
					sP = CStr(arrParams(i))
					str = objStatData.GetValue ("\Classifier\ParamInfo\"+sP)
					Application.WritePrivateProfileString FullClassifierName, "ParamInfo", sP, str
					For k=0 to N-1
						str = objStatData.GetValue ("\Classifier\KeyData:"+sP+"\"+Cstr(k))
						If InStr(str,",")=0 Then
							objStatData.SetValue "\Classifier\General\ClassifyName","Phases"
							Application.WritePrivateProfileString FullClassifierName, "General", "ClassifyName", "Phases"
							Application.WritePrivateProfileString FullClassifierName, "KeyData:0","0", ""
							Application.WritePrivateProfileString FullClassifierName, "KeysInfo", "KeysEnum",""
							Set objStat = Nothing
							Exit Sub
						End If
						Application.WritePrivateProfileString FullClassifierName, "KeyData:"+sP,Cstr(k), str
					Next
				Next
				Application.WritePrivateProfileString FullClassifierName, "KeysInfo", "KeysEnum", objStatData.GetValue ("\Classifier\KeysInfo\KeysEnum")	
			End If
		End If
	End If
	Set objStat = Nothing
End Sub

Sub WriteClassifierToFile()
	Dim objStatData, objStat,sFile, str
	Set objStat = GetStatObj()
	If Not Docs.IsPointerNull(objStat) Then
		Set objStatData = objStat.GetPrivateNamedData
		sFile = objStatData.Getvalue ("\Classifier")
		If sFile <> "" Then
			str = objStatData.GetValue ("\Classifier\General\ClassifyName")
			Select Case str
				Case "Auto"
					WriteAutoClassifierFromDocToFile()
				Case "Manual"
					WriteManualClassifierFromDocToFile()
				Case "Phases"
					WriteManualClassifierFromDocToFile()
				Case Else
			End Select
		End If
	End If
End Sub

'==========================================================
' Устанавливает шаг рисок и значений по оси Y //
' (шаг рисок = 2 * шаг значений) //
' objStat - ссылка на объект Статистика //
' iNum    - примерное кол-во значений по оси Y //
'==========================================================
Sub Set_Y_Scale(objStat,iNum)
	Dim sY_param, max, i, Value, Scale

	If Docs.IsPointerNull(objStat) Then Exit Sub
	sY_param = Data.GetValue("\StatUI\ChartParams\Axis\Y_ParamKey")
	max = 0
	If Data.Getvalue ("\StatUI\ChartParams\ChartType") Then
		For i = 0 To objStat.GetClassCount() - 1
			max = max + objStat.GetValue(i, sY_param)
		Next
	else
		For i = 0 To objStat.GetClassCount() - 1
			Value = objStat.GetValue(i, sY_param)
			If Value > max Then max = Value
		Next
	End If
'	If max <= 0 Then exit sub
	Scale = max / iNum
	Scale = RoundEx(Scale)
	Data.SetValue "\StatUI\ChartParams\Axis\Y_ScaleFactor", Scale / 2
	Data.SetValue "\StatUI\ChartParams\Axis\Y_ScaleFactorValues", Scale
End Sub

Sub Set_X_Scale(objStat)
	Dim auto,min, max, i, Value, iNum, x1,x2,ParamCoeff,class0,arrParams
	Dim classfile,nClass,classX,st,f,min1,lgx,StepEx,t,x,str
	If Docs.IsPointerNull(objStat) Then Exit Sub
	If Data.Getvalue("\StatUI\ChartParams\Axis\X_AxisType") = 0 or ClassifierType (Data.Getvalue ("\Classes\ClassFile")) = "F" Then
		Data.SetValue "\StatUI\ChartParams\Axis\X_UseValueRange", 0		' по классам
		Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactorValues", ""
		Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactor", ""
		Data.SetValue "\StatUI\ChartParams\Axis\X_Begin", 0
		Data.SetValue "\StatUI\ChartParams\Axis\X_End", 1
'		Data.Setvalue "\StatCfg\AxisXAuto",1
		Data.Setvalue "\StatUI\ChartParams\BarWidth" , 0.0001
		Data.Setvalue "\StatUI\ChartParams\Axis\X_ScaleFactorGrid", ""
'		Data.Setvalue "\StatUI\ChartParams\Axis\X_ScaleFactorGrid", 1
		iStepX = Data.Getvalue ("\StatUI\ChartParams\BarWidth")
		Exit Sub
	End If

	auto = Data.Getvalue ("\StatCfg\AxisXAuto")
	If Data.Getvalue("\StatUI\ChartParams\Axis\X_ParamKey") = "" Then Exit Sub
	ParamCoeff = GetParamCoeff(Data.Getvalue("\StatUI\ChartParams\Axis\X_ParamKey"))
	class0 = Data.GetValue ("\StatUI\ChartParams\CustomIntervals\class0")
	arrParams = Split(class0,",")
	If UBound(arrParams)>=0  Then
'		st = FormatNumber(VtDbl(arrParams(1))*ParamCoeff - VtDbl(arrParams(0))*ParamCoeff,2)
		st = VtDbl(arrParams(1)) - VtDbl(arrParams(0))
		ObjectSetValue GetStatObj(), "\StatUI\ChartParams\BarWidth" , st
		Data.Setvalue "\StatUI\ChartParams\BarWidth" , st
	End If
	If auto=1 Then							' auto
		If 0 Then
			min = objStat.GetValue( -1, 196613)
			max = objStat.GetValue( -1, 196614)		
		Else
			class0 = Data.GetValue ("\StatUI\ChartParams\CustomIntervals\class0")
			arrParams = Split(class0,",")
			If UBound(arrParams)>=0  Then
				min = VtDbl(arrParams(0))
			End If
			classfile = Data.Getvalue ("\Classes\ClassFile")
			nClass = CLng(Application.GetPrivateProfileString(classfile,"Classes","ClassCount","1"))
			classX = Data.GetValue ("\StatUI\ChartParams\CustomIntervals\class"+cstr(nClass-1))
			arrParams = Split(classX,",")
			If UBound(arrParams)>=0  Then
				max = VtDbl(arrParams(1))
			End If			
		End If
	else									' manual
		min = VtDbl(Data.Getvalue("\StatUI\ChartParams\Axis\X_Begin"))
		max = VtDbl(Data.Getvalue("\StatUI\ChartParams\Axis\X_End"))
'		Data.Setvalue "\StatUI\ChartParams\BarWidth" , 10
	End If
'	If max <= 0 Then exit sub
		iNum = 4
	
	min1 = min
'	CalcNumFormatAxisX (max*ParamCoeff-min*ParamCoeff), "DISTR"
	CalcNumFormatAxisX max*ParamCoeff, "DISTR"
	min = min1
	
	iStepX = (max-min) / iNum
	If iStepX <= 0 Then exit sub
	t = Data.Getvalue ("\StatUI\ChartParams\UniformDistribution")
	If t Then
		If min>0 Then
		x = int(log(min)/Log(10))	'*ParamCoeff
		lgx = 10^x
		Else
			lgx = 0
	End If
	End If
	iStepX = RoundEx(iStepX)
	
	If iStepX = 0 Then iStepX = 1
	StepEx = Ex(iStepX)
'	If StepEx > 3 Then 
	If auto  Then
		If t <> 1  Then
			If min < iStepX Then
				If min>0 Then 
					str = 0
				else
					str = CLng(RoundEx(min)-iStepX)
				End If
			else
				x1 = 0
				do
					x1 = x1 + iStepX
				loop while x1 < min
				x1 = x1 - iStepX
				str = VtStr(VtDbl(FormatNumber(x1,StepEx,0,0,0)), "%3." + cstr(StepEx) + "f")
			End If
		else
			str = cstr(lgx)
		End If
		Data.SetValue "\StatUI\ChartParams\Axis\X_Begin", str
	End If
	str = FormatNumber(max+1/10^StepEx/2,StepEx,0,0,0)
	str = VtDbl(str)
	str = VtStr(str, "%3." + cstr(StepEx) + "f" )
	If auto  Then Data.SetValue "\StatUI\ChartParams\Axis\X_End", str

	Data.SetValue "\StatUI\ChartParams\Axis\X_UseValueRange", 1		' по параметру
	Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactorValues", iStepX
	If iTickCount>0 Then
		Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactor", iStepX / iTickCount
	else
		Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactor", iStepX
	End If

End Sub


Function ExistAutoClassifier(sFile,objStatData)
	Dim f,d,N,i
	f = Application.GetPrivateProfileString(sFile,"ClassifierInfo","UseRange","0")
	d = objStatData.GetValue ("\Classifier\ClassifierInfo\UseRange")
	If f <> d Then
		ExistAutoClassifier = false
		exit Function
	End If
	f = Application.GetPrivateProfileString(sFile,"ClassifierInfo","RangeMinVal","0")
	d = objStatData.GetValue ("\Classifier\ClassifierInfo\RangeMinVal")
	If f <> d Then
		ExistAutoClassifier = false
		exit Function
	End If
	f = Application.GetPrivateProfileString(sFile,"ClassifierInfo","RangeMaxVal","0")
	d = objStatData.GetValue ("\Classifier\ClassifierInfo\RangeMaxVal")
	If f <> d Then
		ExistAutoClassifier = false
		exit Function
	End If
	f = Application.GetPrivateProfileString(sFile,"ClassifierInfo","RangeMinVal","0")
	d = objStatData.GetValue ("\Classifier\ClassifierInfo\RangeMinVal")
	If f <> d Then
		ExistAutoClassifier = false
		exit Function
	End If
	f = Application.GetPrivateProfileString(sFile,"ClassifierInfo","DivisionType","0")
	d = objStatData.GetValue ("\Classifier\ClassifierInfo\DivisionType")
	If f <> d Then
		ExistAutoClassifier = false
		exit Function
	End If
	f = Application.GetPrivateProfileString(sFile,"ClassifierInfo","DivisionValue","0")
	d = objStatData.GetValue ("\Classifier\ClassifierInfo\DivisionValue")
	If f <> d Then
		ExistAutoClassifier = false
		exit Function
	End If
	f = Application.GetPrivateProfileString(sFile,"KeysInfo","KeysEnum","0")
	d = objStatData.GetValue ("\Classifier\KeysInfo\KeysEnum")
	If f <> d Then
		ExistAutoClassifier = false
		exit Function
	End If
	f = Application.GetPrivateProfileString(sFile,"Classes","ClassCount","0")
	d = objStatData.GetValue ("\Classifier\Classes\ClassCount")
	If f <> d Then
		ExistAutoClassifier = false
		exit Function
	End If

	N = CLng(d)
	For i=-1 to N-1
		f = objStatData.GetValue ("\Classifier\Classes\"+CStr(i))
		d = Application.GetPrivateProfileString(sFile,"Classes",CStr(i),"0")
		If f <> d Then
			ExistAutoClassifier = false
			exit Function
		End If
	next
	g_ExistClassifier = 1
	ExistAutoClassifier = true
End Function

Function ExistManualClassifier(sFile,objStatData)
	Dim f,d,N,i,sP,str,k,arrParams
	f = Application.GetPrivateProfileString(sFile,"KeysInfo","KeysEnum","0")
	d = objStatData.GetValue ("\Classifier\KeysInfo\KeysEnum")
	If f <> d Then
		ExistManualClassifier = false
		exit Function
	End If
	arrParams = Split(d,",")
	f = Application.GetPrivateProfileString(sFile,"Classes","ClassCount","0")
	d = objStatData.GetValue ("\Classifier\Classes\ClassCount")
	If f <> d Then
		ExistManualClassifier = false
		exit Function
	End If

	N = CLng(d)
	For i=-1 to N-1
		f = objStatData.GetValue ("\Classifier\Classes\"+CStr(i))
		d = Application.GetPrivateProfileString(sFile,"Classes",CStr(i),"0")
		If f <> d Then
			ExistManualClassifier = false
			exit Function
		End If
	next

	For i=0 to Ubound(arrParams)
		sP = CStr(arrParams(i))
		str = objStatData.GetValue ("\Classifier\ParamInfo\"+sP)
		For k=0 to N-1
			d = objStatData.GetValue ("\Classifier\KeyData:"+sP+"\"+Cstr(k))
			f = Application.GetPrivateProfileString(sFile,"KeyData:"+sP,Cstr(k),"0")
			If f <> d Then
				ExistManualClassifier = false
				exit Function
			End If
		Next
	Next
	g_ExistClassifier = 1
	ExistManualClassifier = true
End Function

Function Astr(x)
	Astr = Replace(Cstr(x),",",".")
End Function

Sub CalcMinMax(mn,mx)
	Dim str,arr,Ncls,limits,sFile,key
	Select Case ClassifierType (Data.Getvalue ("\Classes\ClassFile"))
		Case "A"
			str = GetFileName(Data.Getvalue("\Classes\ClassFile")) + ".class"
			str = str +"\"+cstr(Data.Getvalue("\StatUI\ChartParams\Axis\X_ParamKey"))

			Data.SetSection "\Classify\"+str
			Ncls = Data.GetEntriesCount

'			Ncls = CLng(Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"Classes","ClassCount","0"))
			limits = Data.Getvalue ("\Classify\"+str+"\class0")
			arr = Split(limits, ",")
			If Ubound(arr)=1 Then
				mn = Application.VtDbl(arr(0))
			End If
			limits = Data.Getvalue ("\Classify\"+str+"\class"+ cstr(Ncls-1))
			arr = Split(limits, ",")
			If Ubound(arr)=1 Then
				mx = Application.VtDbl(arr(1))
			End If
		Case "M"
			If OneParamInClasifier()=1 Then
				sFile = Data.Getvalue("\Classes\ClassFile")
				key = Application.GetPrivateProfileString(sFile,"KeysInfo","KeysEnum","0")
				limits = Split(Application.GetPrivateProfileString(sFile,"KeyData:"+key,"0","0"),",")
				If Ubound(limits)=1 Then
					mn = Application.VtDbl(limits(0))
				End If
				Ncls = CLng(Application.GetPrivateProfileString(sFile,"Classes","ClassCount","0"))-1
				limits = Split(Application.GetPrivateProfileString(sFile,"KeyData:"+key,Cstr(Ncls),"0"),",")
				If Ubound(limits)=1 Then
					mx = Application.VtDbl(limits(1))
				End If
			End If
	End Select
End Sub

Function OneParamInClasifier()
	Dim sFile,arrParams
	sFile = Data.Getvalue("\Classes\ClassFile")
	arrParams = Application.GetPrivateProfileString(sFile,"KeysInfo","KeysEnum","0")
	If instr(arrParams,",") Then
		OneParamInClasifier = 0
	else
		OneParamInClasifier = 1
	End If
End Function

Function Ex(x)
	Dim x1,s,p,d
	Ex = 0
	x1 = x / 1e+200
	s = cstr(x1)
	p = instr(s,"E")
	If p>0 Then
		d = right(s,len(s)-p )
		Ex = 20+d
'		If Ex<0 Then
			Ex = Abs(CLng(Ex))
'		else
'			Ex = 0
'		End If
	End If
End Function

Function GetImage1()
	dim pos
	pos = Objects.GetFirstObjectPos ("Image")
	if pos > 0 then
		Set GetImage1 = Objects.GetObject("Image", pos )
	End If
End Function

Function NeedRepeatMethodLoop
	gPassNo = gPassNo + 1
	Dim img
	ActionState.TerminateCurrentAction
	If not Docs.IsPointerNull(GetStatTable()) Then 
	frmInfoCtrl.edtImg.ValueInt = GetStatTable().getGroupCount()
	frmInfoCtrl.edtObj.ValueInt = GetStatTable().getRowCount()
	End If
	If Data.Getvalue ("\StatCfg\ShowInfoCtrl") Then 
		ToolBars.ShowDockBar ToolBars.FindDockNo("InfoCtrl"), 1
	Else
		ToolBars.ShowDockBar ToolBars.FindDockNo("InfoCtrl"), 0
	End If
	SaveWndPos "InfoCtrl"
	SaveWndPos "PropertySheet"
	If not Docs.IsPointerNull(Objects.ActiveImage) Then Set Img = Objects.ActiveImage
	If IsNotAVI() Then
		ObjectSetValue Img, "\MtdAlready",1
		ObjectSetValue GetImage1(), "\MtdAlready",1
		If NeedControl() Then
			NeedRepeatMethodLoop = CheckData()
			If Data.Getvalue ("\StatCfg\DelayOn") And NeedRepeatMethodLoop Then
				while Timer - gLoopTime < Data.Getvalue ("\StatCfg\Delay")			
				Wend
				gLoopTime = Timer
			End If
		Else
			frmInfoCtrl.txtMsg.Text = Docs.LoadString ("No control")
			If MsgBox (Docs.LoadString ("Iterate?"),vbYesNo+vbQuestion, Docs.LoadString ("Attention!")) = vbYes Then
				NeedRepeatMethodLoop = True
				If Data.Getvalue ("\StatCfg\DelayOn") Then
					while Timer - gLoopTime < Data.Getvalue ("\StatCfg\Delay")			
					Wend
					gLoopTime = Timer
				End If
			else
				NeedRepeatMethodLoop = false
			End If
		End If
	else
		If ObjectGetValue (Img, "\MtdAlready",0)=1 Then 
			NeedRepeatMethodLoop = false
			Exit Function
		Else
			NeedRepeatMethodLoop = True
			If Not Docs.IsPointerNull(Img) Then
				If Img.CurFrame < Img.TotalFrames-1  Then 
					Img.MoveTo Img.CurFrame+1,0
				else
					ObjectSetValue Img, "\MtdAlready",1
					NeedRepeatMethodLoop = false
	End If
			End If
		End If
	End If
	Set Img = Nothing
	If not NeedRepeatMethodLoop Then ActionState.SetActionState "SendTo", 1
	iPreProcess = 1
	ToolBars.ShowDockBar ToolBars.FindDockNo("InfoCtrl"),0
End Function

Function AreaMeasured()
	Dim objStatTable,pos,key
	AreaMeasured = false
	Set objStatTable = GetStatTable()
	If not Docs.IsPointerNull(objStatTable) Then
		pos = objStatTable.getFirstParamPos()
		While pos <> 0
			key = objStatTable.getParamKey(pos)
			If key =0  Then
				AreaMeasured = true
				Set objStatTable = Nothing
				Exit Function
			End If
			pos = objStatTable.getNextParamPos(pos)
		Wend
	End If
	If Data.Getvalue ("\StatUI\ChartParams\Axis\Y_ParamKey")=196629 Or Data.Getvalue ("\StatUI\ChartParams\Axis\Y_ParamKey")=196639 Then
		Data.Setvalue "\StatUI\ChartParams\Axis\Y_ParamKey",196623
	End If
	Set objStatTable = Nothing
End Function

Function GetStatNdata()
	Dim s
	set s = GetStatObj()
	If Docs.IsPointerNull(s) Then Exit Function
	Set GetStatNdata = s.GetPrivateNamedData
	set s = Nothing
End Function

Function GetTableNdata()
	Dim s
	set s = GetStatTable()
	If Docs.IsPointerNull(s) Then 
		Set GetTableNdata = Data
		Exit Function
	End If
	Set GetTableNdata = s.GetPrivateNamedData
	set s = Nothing
End Function

Function DataContext_BeforeNumberItem (obj, sType, N)
	DataContext_BeforeNumberItem=1
	Dim Res
	If "StatObject"=sType Then
		If Objects.GetSelectedObjectsCount(sType)>0 Then
			DeSelectAllObjects sType
			gRec = 1
			Objects.SelectObject obj, 1
			DataContext_BeforeNumberItem=0
			gRec=0
		End If
	End If
'	MsgBox "Numbering "& cstr(sType) & "DataContext_BeforeNumberItem="&DataContext_BeforeNumberItem
End Function

sub DataContext_ObjectSelectionChange (a, b)
	exit sub
	Dim obj
	If gRec = 1 or MethodMan.IsRunning() or CLng(b) = 0 Then Exit Sub
	gRec = 1
	If (cstr(a) = "StatObject" or cstr(a) = "StatTable") Then
		If CLng(b) > 1  Then
			Objects.GetFirstSelectedObjectPos cstr(a), lPos
			Set obj = Objects.GetSelectedObject(cstr(a),lPos)
			DeSelectAllObjects cstr(a)
			Objects.SelectObject obj, 1
			Set obj = Nothing
		Else
			ObjectSetValue GetStatObj(), "\StatUI\ChartParams\ChartViewType", 0
			If cstr(a) = "StatObject" Then
				InitStat(0)
			Else
				Set_Depend_Scale()
			End If
			MainWnd.UpdateViewSettings
		End If
	End If
	gRec = 0
end sub

Sub CorrectParamList()
	Dim objStat,objData,a,i,ParamID,nameOD
	Set objStat = GetStatObj()
	If Docs.IsPointerNull(objStat) Then Exit Sub
	Set objData = objStat.GetPrivateNamedData
	objData.SetSection "\StatUI\StatParams"
	a = objData.GetEntriesCount
	For i=0 To a-1
		objData.SetSection "\StatUI\StatParams"
		ParamID  = objData.GetEntryName(i)
		If IsNumeric( ParamID ) Then
			If CLng(ParamID) >= 262147 Then
				nameOD = objData.Getvalue ("\StatUI\StatParams\" + ParamID + "\UserName")
				If nameOD = "" Then
					objData.Setvalue "\StatUI\StatParams\" + ParamID, ParamID
				End If
			End If
		End If
	Next
	Set objData = Nothing
	Set objStat = Nothing
End Sub

Function GetView()
	Dim str
	str = GetCurrentView()
	If InStr(str,"ImageDoc.") Then
		GetView = "ImgViews"
	else
		GetView = str
	End If
End Function

Function GetNameObjectList()
	Dim obj,pos
	Set obj = Objects.GetActiveObject( "Object List" )
	If Docs.IsPointerNull(obj) Then
		pos = Objects.GetFirstObjectPos("Object List")
		If pos <> 0 Then
			Set obj = Objects.GetObject("Object List", pos)
		End If
	End If
	If Docs.IsPointerNull(obj) Then Exit Function
	GetNameObjectList = obj.Name
	Set obj = Nothing
End Function

Sub ShowLabels(show)
	Dim sd
	Data.Setvalue "\StatUI\ChartParams\Axis\X_ShowAxisValues" , show
	Data.Setvalue "\StatUI\ChartParams\Axis\X_ShowAxisLabels" , show
	Data.Setvalue "\StatUI\ChartParams\Axis\Y_ShowAxisValues" , show
	Data.Setvalue "\StatUI\ChartParams\Axis\Y_ShowAxisLabels" , show
	If GetNameStatObj() <> "" Then
		Set sd = GetStatNdata()
		sd.Setvalue "\StatUI\ChartParams\Axis\X_ShowAxisValues" , show
		sd.Setvalue "\StatUI\ChartParams\Axis\X_ShowAxisLabels" , show
		sd.Setvalue "\StatUI\ChartParams\Axis\Y_ShowAxisValues" , show
		sd.Setvalue "\StatUI\ChartParams\Axis\Y_ShowAxisLabels" , show
		Set sd = Nothing
	End If
End Sub


'============================================================================
Sub Compare(a)
	Select Case a
		Case "StatObject"
			gRec = 1
			ShowStatView
			gRec = 0
			Set_Distr_Scale()
		Case "StatTable"
'			Set_Depend_Scale()
'			gRec = 1
'			ShowStatTableDependence
'			gRec = 0
			FormManager.ExecutePageModal "StatGraphCompare"
	End Select
	MainWnd.UpdateViewSettings
End Sub

Sub Set_Distr_Scale()
	Dim lPos,obj,ClassFile,x1,x2,sOS,iNum,StepEx,xStart
	lPos = 0
	Objects.GetFirstSelectedObjectPos "StatObject", lPos
	Set obj = Objects.GetNextSelectedObject("StatObject",lPos)
	If Docs.IsPointerNull(obj) Then Exit Sub
	ClassFile = ObjectGetValue (obj, "\Classes\ClassFile", "")
	ObjectSetValue obj, "\StatUI\ChartParams\ChartViewType", 1

	x1 = 1e+300
	x2 = 0
	x1 = Min(x1,obj.GetValue( -1, 196613))
	x2 = Max(x2,obj.GetValue( -1, 196614))

	While lPos <> 0
		Set obj = Objects.GetNextSelectedObject("StatObject",lPos)
		x1 = Min(x1,obj.GetValue( -1, 196613))
		x2 = Max(x2,obj.GetValue( -1, 196614))
		If ClassFile <> ObjectGetValue (obj, "\Classes\ClassFile", "") Then
			MsgBox Docs.LoadString ("Classifiers differ!")
		End If
	Wend
	set obj = Nothing

	If x2 <= 0 Then exit sub

	sOS = GetNameStatObj()
	iNum = 6
	iStepX = (x2-x1) / iNum
	If iStepX <= 0 Then exit sub
	iStepX = RoundEx(iStepX)
	If iStepX = 0 Then iStepX = 1
	StepEx = Ex(iStepX)
	If x1 < iStepX Then
		Data.SetValue "\StatUI\ChartParams\Axis\X_Begin", 0
		ObjectSetValue sOS, "\StatUI\ChartParams\Axis\X_Begin", 0
	else
		xStart = 0
		do
			xStart = xStart + iStepX
		loop while xStart < x1
		xStart = xStart - iStepX
		str = Application.VtStr(Application.VtDbl(FormatNumber(xStart,StepEx,0,0,0)), "%3.3f")
		Data.SetValue "\StatUI\ChartParams\Axis\X_Begin", str
		ObjectSetValue sOS, "\StatUI\ChartParams\Axis\X_Begin", str
	End If

	str = FormatNumber(x2+1/10^StepEx/2,StepEx,0,0,0)
	str = Application.VtDbl(str)
	str = Application.VtStr(str, "%3.3f")
	ObjectSetValue sOS, "\StatUI\ChartParams\Axis\X_End", str
	ObjectSetValue sOS, "\StatUI\ChartParams\Axis\X_UseValueRange", 1
	ObjectSetValue sOS, "\StatUI\ChartParams\Axis\X_ScaleFactorValues", iStepX
	ObjectSetValue sOS, "\StatUI\ChartParams\Axis\X_ScaleFactor", iStepX
'	Data.SetValue "\StatUI\ChartParams\Axis\X_End", str
'	Data.SetValue "\StatUI\ChartParams\Axis\X_UseValueRange", 1		' по параметру
'	Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactorValues", iStepX
'	Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactor", iStepX
End Sub


Sub Set_Depend_Scale()
	Dim i,Value,iNum,auto,lPos,X_ParamKey,Y_ParamKey,x1,x2,y1,y2,pos,kX,kY,NData,obj,v

	lPos = 0
	Objects.GetFirstSelectedObjectPos "StatTable", lPos
	Set obj = Objects.GetSelectedObject("StatTable",lPos)

	If Docs.IsPointerNull(obj) Then Exit Sub
	Set NData = obj.GetPrivateNamedData

	If Docs.IsPointerNull(obj) Then Exit Sub

	i = 0
	X_ParamKey = NData.Getvalue ("\StatDependence\ChartParams\Axis\X_ParamKey")
	Y_ParamKey = NData.Getvalue ("\StatDependence\ChartParams\Axis\Y_ParamKey")

	x1 = 1e+300
	x2 = -1e+300
	y1 = 1e+300
	y2 = -1e+300
	While lPos <> 0
		Set obj = Objects.GetNextSelectedObject("StatTable",lPos)
		pos = obj.getFirstRowPos()
		While pos <> 0
			v = obj.getValueByKey ( pos, X_ParamKey )
			x1 = Min(v,x1)
			x2 = Max(v,x2)
			v = obj.getValueByKey ( pos, Y_ParamKey )
			y1 = Min(v,y1)
			y2 = Max(v,y2)
			pos = obj.getNextRowPos(pos)
			ObjectSetValue obj,"\StatDependence\ChartParams\Axis\X_ParamKey",X_ParamKey
			ObjectSetValue obj,"\StatDependence\ChartParams\Axis\Y_ParamKey",Y_ParamKey
		Wend
	Wend
	kX = GetParamCoeff(Data.Getvalue("\StatDependence\ChartParams\Axis\X_ParamKey"))
	kY = GetParamCoeff(Data.Getvalue("\StatDependence\ChartParams\Axis\Y_ParamKey"))
	CalcNumFormatAxisX x2*kX, "DEPEND"
	CalcNumFormatAxisY y2*kY

	NData.SetValue "\StatDependence\ChartParams\Axis\X_Begin",x1
	NData.SetValue "\StatDependence\ChartParams\Axis\X_End",x2
	NData.SetValue "\StatDependence\ChartParams\Axis\Y_Begin",y1
	NData.SetValue "\StatDependence\ChartParams\Axis\Y_End",y2

	CalcStep x1,x2,y1,y2
	Set NData = Nothing
	set obj = Nothing
End Sub


Sub CalcStep(x1,x2,y1,y2)
	Dim lpos,obj,iNum,StepEx,n,iStepY,X_Begin,Y_Begin,Ndata
	Objects.GetFirstSelectedObjectPos "StatTable", lPos
	If lPos = 0 Then Exit Sub
	Set obj = Objects.GetNextSelectedObject("StatTable",lPos)
	Set Ndata = obj.GetPrivateNamedData

	If x1=x2 Then
		x1 = x1*.9
		x2 = x2*1.1
	End If
	If y1=y2 Then
		y1 = y1*.9
		y2 = y2*1.1
	End If
	iNum = 6
	iStepX = (x2-x1) / iNum
	If iStepX <= 0 Then exit sub
	iStepX = RoundEx(iStepX)
	If iStepX = 0 Then iStepX = 1
	StepEx = Ex(iStepX)

	NData.SetValue "\StatDependence\ChartParams\Axis\X_ScaleFactorValues", iStepX
	NData.SetValue "\StatDependence\ChartParams\Axis\X_ScaleFactor", iStepX / 2
	NData.SetValue "\StatDependence\ChartParams\Axis\X_ScaleFactorGrid", iStepX / 2
	NData.SetValue "\StatDependence\ChartParams\Axis\X_UseValueRange", 1
	If x1 < iStepX Then
		If x1>=0 Then
			X_Begin = 0
		Else
		X_Begin = RoundEx(x1) - iStepX
		End If
	else
		X_Begin = 0
		do
			X_Begin = X_Begin + iStepX
		loop while X_Begin < x1
		X_Begin = X_Begin - iStepX
	End If
	NData.SetValue "\StatDependence\ChartParams\Axis\X_Begin", X_Begin
	NData.SetValue "\StatDependence\ChartParams\Axis\X_End", x2

	iStepY = (y2-y1) / iNum
	If iStepY <= 0 Then exit sub
	iStepY = RoundEx(iStepY)
	If iStepY = 0 Then iStepY = 1
	StepEx = Ex(iStepY)
	NData.SetValue "\StatDependence\ChartParams\Axis\Y_ScaleFactorValues", iStepY
	NData.SetValue "\StatDependence\ChartParams\Axis\Y_ScaleFactor", iStepY / 2
	NData.SetValue "\StatDependence\ChartParams\Axis\Y_ScaleFactorGrid", iStepY / 2
	NData.SetValue "\StatDependence\ChartParams\Axis\Y_UseValueRange", 1
	If y1 < iStepY Then
		If y1>=0 Then
		Y_Begin = 0
		Else
		Y_Begin = RoundEx(y1) - iStepY
		End If
	else
		Y_Begin = 0
		do
			Y_Begin = Y_Begin + iStepY
		loop while Y_Begin < y1
		Y_Begin = Y_Begin - iStepY
	End If
	NData.SetValue "\StatDependence\ChartParams\Axis\Y_Begin", Y_Begin
	NData.SetValue "\StatDependence\ChartParams\Axis\Y_End", y2

	Set Ndata = Nothing
	set obj = Nothing

End Sub
'============================================================================

Function CheckData()
	Dim objTable,Ntable,objStat,dArea,cl,n
	CheckData = 0
	Set objTable = GetStatTable()
	If Docs.IsPointerNull(objTable) Then 
		Ntable = GetImageData ("ImageCountFinished")
		If Ntable < Data.Getvalue ("\StatCfg\CtrlImgCount")-1 Then CheckData = 1		
		If MethodMan.IsRunning() Then SetImageData "ImageCountFinished", Ntable+1
		frmInfoCtrl.edtImg.ValueInt = Ntable+1
	else
		Set objStat = GetStatObj()
		If Data.Getvalue ("\StatCfg\CtrlData")=1  Then
			Select Case Data.Getvalue ("\StatCfg\CtrlImageAreaData")
				Case 0
					Ntable = objTable.getGroupCount()
					If Ntable < Data.Getvalue ("\StatCfg\CtrlImgCount") Then CheckData = 1
				Case 1
					If Docs.IsPointerNull(objStat) Then
						MsgBox Docs.LoadString ("Area can`t be controlled, there is no statistics!"),vbOKOnly+vbExclamation, Docs.LoadString ("Attention!")
						Exit Function
					End If
					dArea = objStat.GetValueInUnit ( -1, 196626)
					If dArea < Data.Getvalue ("\StatCfg\CtrlMeasuredArea") Then CheckData = 1
				Case 2
					If Data.Getvalue ("\StatCfg\CheckClass") Then				
						If Docs.IsPointerNull(objStat) Then
							MsgBox Docs.LoadString ("Number can`t be controlled, there is no statistics!"),vbOKOnly+vbExclamation, Docs.LoadString ("Attention!")
							Exit Function
						End If
						cl = Data.Getvalue ("\StatCfg\InClass")
						n = objStat.GetValue( cl, 196623)
						frmInfoCtrl.edtObj.ValueInt = n
					else
						n = objTable.getRowCount()
					End If
					If n < Data.Getvalue ("\StatCfg\CtrlObjCount") Then CheckData = 1
			End Select
		End If
	End If
	If CheckData Then
		frmInfoCtrl.txtMsg.Text = Docs.LoadString ("Data is not ehough")
	else
		frmInfoCtrl.txtMsg.Text = Docs.LoadString ("Data is enough")
	End If
	Set objTable = Nothing
	Set objStat = Nothing
End Function

Function NeedControl()
	If Data.Getvalue ("\StatCfg\CtrlData")=1  Then
		NeedControl = 1
	End If
End Function

Sub MethodMan_OnChangeActiveMethod(ActionName)
	DataFix()
	frmInfoCtrl.edtImg.ValueInt = 0
	frmInfoCtrl.edtObj.ValueInt = 0

	'сброс оптической плотности //
	Data.RemoveValue "\ODensity"
	Data.Setvalue "\ODensity\Method", 255
	OpticMeasure.Free
	OpticMeasure.Method = 0
	UpdateWindow 1
End Sub

Sub GridY()
	Data.Setvalue "\StatUI\ChartParams\Axis\DrawEndChartGridLineY", 1
	Data.Setvalue "\StatUI\ChartParams\Axis\Y_ShowAxisValues" , 1
	Data.Setvalue "\StatUI\ChartParams\Axis\Y_ShowAxisLabels" , 1
	Select Case Data.Getvalue ("\StatCfg\GridY")
		Case 0
			Data.Setvalue "\StatUI\ChartParams\Axis\Y_Grid", 0
'			Data.Setvalue "\StatUI\ChartParams\Axis\Y_ShowAxisValues" , 0
'			Data.Setvalue "\StatUI\ChartParams\Axis\Y_ShowAxisLabels" , 0
		Case 1
			Data.Setvalue "\StatUI\ChartParams\Axis\Y_Grid", 1
			Data.Setvalue "\StatUI\ChartParams\Axis\Y_ScaleFactorGrid",_
			Data.GetValue ("\StatUI\ChartParams\Axis\Y_ScaleFactorValues")
		Case 2
			Data.Setvalue "\StatUI\ChartParams\Axis\Y_Grid", 1
			Data.Setvalue "\StatUI\ChartParams\Axis\Y_ScaleFactorGrid",_
			Data.GetValue ("\StatUI\ChartParams\Axis\Y_ScaleFactor")
	End Select
End Sub
Sub GridX()
	Dim a	
	Data.Setvalue "\StatUI\ChartParams\Axis\DrawEndChartGridLineX", 1
	Data.Setvalue "\StatUI\ChartParams\Axis\X_ShowAxisValues" , 1
	Data.Setvalue "\StatUI\ChartParams\Axis\X_ShowAxisLabels" , 1
	Select Case Data.Getvalue ("\StatCfg\GridX")
		Case 0 
			Data.Setvalue "\StatUI\ChartParams\Axis\X_Grid", 0
'			Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactorValues", Data.Getvalue ("\StatUI\ChartParams\BarWidth")
'			Data.SetValue "\StatUI\ChartParams\Axis\X_ScaleFactor", Data.Getvalue ("\StatUI\ChartParams\BarWidth")
		Case 1
			Data.Setvalue "\StatUI\ChartParams\Axis\X_Grid", 1
			If Data.Getvalue ("\StatUI\ChartParams\Axis\X_UseLogaScale") Then
				Data.Setvalue "\StatUI\ChartParams\Axis\X_ScaleFactorGrid", 10
			Else
			Data.Setvalue "\StatUI\ChartParams\Axis\X_ScaleFactorGrid", iStepX
			End If
		Case 2
			Data.Setvalue "\StatUI\ChartParams\Axis\X_Grid", 1
			If Data.Getvalue ("\StatUI\ChartParams\Axis\X_UseLogaScale") Then
				Data.Setvalue "\StatUI\ChartParams\Axis\X_ScaleFactorGrid", 1
			else
			If iTickCount>0 And Data.Getvalue("\StatUI\ChartParams\Axis\X_AxisType") = 1 Then
				Data.Setvalue "\StatUI\ChartParams\Axis\X_ScaleFactorGrid", iStepX / iTickCount
			else
				Data.Setvalue "\StatUI\ChartParams\Axis\X_ScaleFactorGrid", iStepX
			End If
			End If
	End Select
	If Data.Getvalue ("\StatUI\ChartParams\Axis\X_AxisType") = 0 Then
		a = Data.Getvalue ("\StatUI\BarWidth")
		If a>0 Then	Data.Setvalue "\StatUI\ChartParams\Axis\X_ScaleFactorGrid", a
	End If
End Sub

Sub SetLogStep()
	Dim ParamCoeff,mn,mx,classfile,nClass,fStep
	CalcMinMax mn,mx
	ParamCoeff = GetParamCoeff(Data.Getvalue("\StatUI\ChartParams\Axis\X_ParamKey"))
	mn = mn * ParamCoeff
	mx = mx * ParamCoeff
	If mx <= 0 Then Exit Sub
	If mn<mx/10000 Then
	  mn = mx/10000
	End If
	classfile = Data.Getvalue ("\Classes\ClassFile")
	nClass = CLng(Application.GetPrivateProfileString(classfile,"Classes","ClassCount","1"))
	If mn > 0 Then
	fStep = (mx/mn)^(1/nClass) * 1.0001
	Else
		fStep = (1000)^(1/nClass) * 1.0001	
	End If
	Application.WritePrivateProfileString classfile, "ClassifierInfo", "DivisionType", 2
	Application.WritePrivateProfileString classfile, "ClassifierInfo", "DivisionValue", fStep
End Sub


Sub AllClassOn()
	Dim classfile,nClass,sWhat,i,str
	classfile = Data.Getvalue ("\Classes\ClassFile")
	nClass = CLng(Application.GetPrivateProfileString(classfile,"Classes","ClassCount","1"))
	sWhat = ""
	For i=0 to nClass-1
		If len(sWhat)>0 Then sWhat = sWhat + ","
		sWhat = sWhat + Cstr(i)
	Next
	Data.Setvalue "\StatUI\CalcForAllClasses" ,swhat
End Sub

Function WarningNotCalculatedParams(arg1, arg2)
	WarningNotCalculatedParams = 1
	MakeClassFile arg1, arg2
End Function

Function WarningNoParams(arg)
	WarningNoParams = 1
	TurnParamOn arg
End Function

Function MethodMan_BeforeInteractiveMethodStep(action, group)
	Dim str,BarNo
	If MethodMan.IsRecording() Then
		Data.Setvalue "\Message\ToolBars" ,""
		str = ""
		For BarNo = 1 To ToolBars.GetBarsCount-1
			If ToolBars.HasAction(BarNo, action) Then
				ToolBars.ShowBar BarNo, 1
			End If
		Next
	End If
	If MethodMan.IsRecording() or MethodMan.IsRunning() Then
		ToolBars.ShowDockBar ToolBars.FindDockNo("Message") , 1
		ToolBars.ShowDockBar ToolBars.FindDockNo ( "MethodPanel" ), 0
		ToolBars.ShowDockBar ToolBars.FindDockNo ( "MetodicsTab" ), 0
		
		MethodMan.StartSetValueLogging
		Data.Setvalue "\Message\InterAction", group
		MethodMan.FinishSetValueLogging
	End If
	
'	MsgBox "Action: " & action & ", Group: " & group
End Function

Function MethodMan_ExecuteInteractiveMethodStep(action, group)
'	While ToolBars.IsDockBarVisible (ToolBars.FindDockNo("Message"))
'		Application.ProcessMessage 0
'	Wend
'	MsgBox "Action: " & action & ", Group: " & group
End Function

Sub TurnParamOn(arg)
	Dim TurnParamOn,str,i,arrParams
	arrParams = Split(arg,",")
	For i=0 to Ubound(arrParams)
		If arrParams(i) >1999 And arrParams(i)<3000 Then Exit Sub
		str = GetParamMainName(arrParams(i))
		Data.Setvalue "\measurement\parameters\"+str+"\Enable" ,1
	Next
	MainWnd.UpdateSystemSettings
	ActionManager.CalcMeasResult
End Sub

Sub UnSplit()
	Dim frame,s
	Set frame = MainWnd.ActiveFrame
	If not Docs.IsPointerNull(frame) Then
		Set s = frame.GetSplitter
		s.Split 1, 1
		Set frame = Nothing
		Set s = Nothing
	End If
End Sub

Function StatDiffParam()
	Dim ClassParam,StatParam
	StatDiffParam = true
	StatParam = Data.Getvalue("\StatUI\ChartParams\Axis\X_ParamKey")
	ClassParam = Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"KeysInfo","KeysEnum","")
	If ClassParam <> "" and Instr(ClassParam,",")=0 Then
		If StatParam = ClassParam Then StatDiffParam = false	
	End If
End Function

Sub MethodMan_OnRunMtd ()
	'MsgBox "MethodMan_OnRunMtd ()"
	gPassNo = 1
'	LoadStatCfg()
	MethodMan.ClearMethodCache()
	ActionState.SetActionState "SendTo", 0
	SaveWndPos "MetodicsTab"
	SaveWndPos "MethodPanel"
	MainWnd.EnableAccelerators false
	Call HideDockBars_main("\Master\DockBars\")
	Data.SetValue "\FileOpenDialog\FilterTemplate", "bmp, tif, tiff, jpg, jpeg, jpe"
	Data.SetValue "\FormManager\EnableApply", 0
	Data.SetValue "\General\EnableDock", 0
	Data.SetValue "\MainFrame\EnableDragDropOpen", 0 
	gLoopTime = Timer
	gStartTime = Timer
End Sub

Sub MethodMan_OnRunMtdComplete ()
	'MsgBox "MethodMan_OnRunMtdComplete ()"
	gPassNo = 0
	MainWnd.EnableAccelerators true
	Data.SetValue "\General\EnableDock", 1
	Data.SetValue "\FormManager\EnableApply", 1
	Data.Setvalue "\General\SaveStateOnExit" , 1
'	Data.SetValue "\DockBars\NoShowHide",0
	
	'если записывается методика, не выполняем Hide/ShowDockBars //
	If MethodMan.IsRecording Then
		gbWas_OnRunMtdComplete_EventOnRecording = True
	Else
	ToolsLoadState Data.GetValue( "\Paths\States" ) & "Master.state"
	Call ShowDockBars_main("\Master\DockBars\")
		If Data.Getvalue ("\StatCfg\ShowInfoCtrl") Then 
			ToolBars.ShowDockBar ToolBars.FindDockNo("InfoCtrl"), 1
		Else
			ToolBars.ShowDockBar ToolBars.FindDockNo("InfoCtrl"), 0
		End If
	ToolBars.ShowBar 0,1
	End If
	
'	Data.SetValue "\MainFrame\ShowPopupMenu", Data.GetValue ("\MainFrame\ShowPopupMenuOld")
	Data.Setvalue "\General\DeleteFilterArgs",iDeleteFilterArgs
	Data.SetValue "\FileOpenDialog\FilterTemplate", "image, bmp, tif, tiff, jpg, jpeg, jpe, vti, avi"
	Data.SetValue "\MainFrame\EnableDragDropOpen", 1 
	MainWnd.UpdateSystemSettings
	ActionState.SetActionState "SendTo", 1
	Data.Setvalue "\MainFrame\NotifyInMainLoop", 1
	iLoopAction = 4
End Sub

Sub MethodMan_OnStopRecordMtd()
	'MsgBox "MethodMan_OnStopRecordMtd"
	MainWnd.EnableAccelerators = true
	Data.SetValue "\FormManager\EnableApply", 1
	If gRec Then exit Sub
'	Data.SetValue "\DockBars\NoShowHide",0
	Data.Setvalue "\MainFrame\EnableDockCloseButton\MethodPanel" , 1
	Data.Setvalue "\MainFrame\EnableDockCloseButton\MetodicsTab" , 1
	Data.Setvalue "\MainFrame\NotifyInMainLoop" ,1
	Data.SetValue "\MainFrame\EnableDragDropOpen", 1 
	iLoopAction = 1
	ObjectSetValue GetImage1(), "\MtdAlready",1
End Sub

Sub MethodMan_OnStartRecordMtd()
	'Msgbox "MethodMan_OnStartRecordMtd"
	MainWnd.EnableAccelerators = false
	Data.SetValue "\FormManager\EnableApply", 0
	Freeze &H0
	Data.Setvalue "\MainFrame\EnableDockCloseButton\MethodPanel" , 0
	Data.Setvalue "\MainFrame\EnableDockCloseButton\MetodicsTab" , 0
	Data.SetValue "\Master\DockBars\VisibleTBName",""
	Data.SetValue "\MainFrame\EnableDragDropOpen", 0 
	Data.Setvalue "\MainFrame\NotifyInMainLoop" ,1
	
	'если записывается методика, не выполняем Hide/ShowDockBars //
	If gbWas_OnRunMtdComplete_EventOnRecording Then
		gbWas_OnRunMtdComplete_EventOnRecording = False
	Else
	Call HideDockBars_main("\Master\DockBars\")
	End If

'	Call BlockSplitterButtons(0)

	ToolBars.ShowDockBar ToolBars.FindDockNo ( "MethodPanel" ), 1
	ToolBars.ShowDockBar ToolBars.FindDockNo ( "MetodicsTab" ), 1
'	Data.SetValue "\DockBars\NoShowHide",1
	bNeedShowMtdPanel = true
	ActionState.SetActionState "SendTo", 0
	Freeze 0
	iLoopAction = 5
End Sub

Sub GlobalStat()
	Data.Setvalue "\General\tmp" , "GlobalStat"
	Freeze &H0
	FormManager.ExecutePageModal "ClassAuto"
	Freeze 0
	Data.RemoveValue  "\General\tmp" 
End Sub

Function copy_entry_to_shelldata( strFileName, strSection )
	Dim fso
	Dim objData
	Dim strFullName, intEntriesCount, strFieldName, varValue

	Set fso = CreateObject("Scripting.FileSystemObject")
	copy_entry_to_shelldata = False
	If Not fso.FileExists(strFileName) Then Exit Function
	Set objData = CreateObject( "Data.NamedData" )
	objData.ReadFile strFileName
	Data.RemoveValue strSection
	Data.CopyNamedData objData, strSection, strSection, 1
	Set objData = Nothing
	copy_entry_to_shelldata = True
	Set fso = Nothing
End Function

Sub ReplaceLogParams()
	Dim logs, norm,i, logs1,norm1,v
	logs = lg.Items
	norm = lg.Keys
	If Data.Getvalue ("\StatUI\ChartParams\UniformDistribution") Then	
		For i=0 to lg.Count -1
			logs1 = logs(i)
			norm1 = norm(i)
			v = Data.Getvalue ("\StatUI\StatParams\" + cstr(norm1) + "\Visible")
			Data.Setvalue "\StatUI\StatParams\" + cstr(logs1) + "\Visible", v
			Data.Setvalue "\StatUI\StatParams\" + cstr(norm1) + "\Visible", 0
		Next
	else
		For i=0 to lg.Count -1
			logs1 = logs(i)
			norm1 = norm(i)
			v = Data.Getvalue ("\StatUI\StatParams\" + cstr(logs1) + "\Visible")
			Data.Setvalue "\StatUI\StatParams\" + cstr(norm1) + "\Visible", v
			Data.Setvalue "\StatUI\StatParams\" + cstr(logs1) + "\Visible", 0
		Next
	End If
End Sub

Sub MethodMan_AfterRecordMethodStep(str)
	If ActionState.GetCurrentAction() <> "" Then Exit Sub
	Dim TBarCount,i
		TBarCount = ToolBars.GetBarsCount
		For i = 0 To TBarCount - 1								'Скрываем тулбары //
			ToolBars.ShowBar i, 0
		Next
		ToolBars.ShowDockBar ToolBars.FindDockNo ( "MethodPanel" ), 1
		ToolBars.ShowDockBar ToolBars.FindDockNo ( "MetodicsTab" ), 1	
End Sub

Sub CalcNumFormatAxisX(mx,gr)
	Data.Setvalue "\StatUI\ChartParams\Axis\X_UseCustomFormat" ,1
	ObjectSetValue GetStatTable(),"\StatDependence\ChartParams\Axis\X_UseCustomFormat" ,1
	
		If gr = "DISTR" Then
		Data.Setvalue "\StatUI\ChartParams\Axis\X_CustomFormat" ,"%.4g"
	else
		ObjectSetValue GetStatTable(),"\StatDependence\ChartParams\Axis\X_CustomFormat" ,"%.4g"
		End If
End Sub
Sub CalcNumFormatAxisY(mx)
	ObjectSetValue GetStatTable(),"\StatDependence\ChartParams\Axis\Y_UseCustomFormat" ,1
	ObjectSetValue GetStatTable(),"\StatDependence\ChartParams\Axis\Y_CustomFormat" ,"%.4g"
End Sub

Function Get1ObjectList()
	dim pos
	pos = Objects.GetFirstObjectPos ("Object List")
	if pos > 0 then
		Set Get1ObjectList = Objects.GetObject("Object List", pos )
	End If
End Function

Sub Application_OnMainLoop
	Dim pos,i,strState
	strState = Data.GetValue( "\Paths\States" )
	Select Case iLoopAction
		Case 1
			Freeze &H0
			LoadMtdContent Data.Getvalue ( "\Paths\Methods" ) & "Master.smtd"
			Call ShowDockBars_main("\Master\DockBars\")
			ActionState.SetActionState "SendTo", 1
			ActionManager.FitDoc2Screen
			Freeze 0
		Case 2
			ToolsLoadState strState & "Master.state"
		Case 3
			If isDocDB Then
			Freeze &H0
			ToolsLoadState strState & "Master_db.state"

			pos = ToolBars.FindNo ( "In method" )
			If MethodMan.IsRunning() Then
				'включаем только тулбар "In method" //
				For i = 0 To ToolBars.GetBarsCount - 1
					If i = pos Then
						ToolBars.ShowBar i, 1
					Else
						ToolBars.ShowBar i, 0
					End If
				Next
			Else
				'включаем всё кроме тулбара "In method" //
				For i = 0 To ToolBars.GetBarsCount - 1
					If i = pos Then
						ToolBars.ShowBar i, 0
					Else
						ToolBars.ShowBar i, 1
					End If
				Next
			End If
			Freeze 0
			End If
		Case 4
			Freeze &H0
			LoadMtdContent Data.Getvalue ( "\Paths\Methods" ) & "Master.smtd"
			ActionManager.FitDoc2Screen
			Freeze 0
		Case 5
			Freeze &H0
			LoadMtdContent Data.Getvalue ( "\Paths\Methods" ) & "MasterM.smtd"
			Freeze 0
		Case Else
	End Select
	iLoopAction = 0
End Sub

Sub ParamMustOn()
	Dim i,id,grp,v,logs,pCount
	Data.Setvalue "\StatUI\ChartParams\Axis\X_ShowAxisValues" , 1
	Data.Setvalue "\StatCfg\ShowParam", 0
	Data.Setvalue "\StatUI\StatTable\ClassColTitle", Docs.LoadString("Class")
	Data.SetSection "\StatUI\StatParams"
	pCount = Data.GetEntriesCount
	For i=0 To pCount-1
		Data.SetSection "\StatUI\StatParams"
		id = Data.GetEntryName(i)
		grp = CLng(Data.Getvalue ("\StatUI\StatParams\"+id+"\Group"))
		If grp = 1 or grp = 4  Then 
			v = Data.Getvalue ("\StatUI\StatParams\"+id+"\Visible")
			If v and 1 Then
				Data.Setvalue "\StatCfg\ShowParam", 1
			End If
			If v and 2 Then
				Data.Setvalue "\StatUI\StatTable\ClassColTitle",GetParamUserName(clng(Data.Getvalue("\StatUI\ChartParams\Axis\X_ParamKey")))
			End If
		End If
	Next	
	logs = lg.Items
	For i=0 to lg.Count -1
		v = Data.Getvalue ("\StatUI\StatParams\" + cstr(logs(i)) + "\Visible")
		If v and 1 Then
			Data.Setvalue "\StatCfg\ShowParam", 1
		End If
		If v and 2 Then
			Data.Setvalue "\StatUI\StatTable\ClassColTitle",GetParamUserName(clng(Data.Getvalue("\StatUI\ChartParams\Axis\X_ParamKey")))
		End If
	Next	
end sub

Sub ShowHidePropertyZone(show)
	Dim objStat,objTD
	Data.SetValue "\StatUI\Enable_ChartArea", show
	Data.SetValue "\StatUI\Enable_StatParamArea", show
	Data.SetValue "\StatUI\Enable_TableStatArea", show
	Data.SetValue "\StatDependence\Enable_ChartArea", show

	Set objStat = GetStatObj()
	If Not Docs.IsPointerNull(objStat) Then
	ObjectSetValue objStat, "\StatUI\Enable_ChartArea", show
	ObjectSetValue objStat, "\StatUI\Enable_StatParamArea", show
	ObjectSetValue objStat, "\StatUI\Enable_TableStatArea", show
	End If

	Set objTD = Objects.GetActiveObject("StatTable")
	If Not Docs.IsPointerNull(objTD) Then
		ObjectSetValue objTD, "\StatDependence\Enable_ChartArea", show
	End If

	MainWnd.UpdateViewSettings
	Set objStat = Nothing
	Set objTD = Nothing
End Sub

Sub ClearManualMeasParams()
	Dim tmp,i,a,x,ParamName
	tmp = Data.GetSection()
	Data.SetSection "\measurement\parameters"
	a = Data.GetEntriesCount
	For i=a-1 To 0 step -1
		Data.SetSection "\measurement\parameters"
		ParamName = Data.GetEntryName(i)
		x = Cdbl(Data.Getvalue ("\measurement\parameters\" + ParamName + "\Key"))
		If x > 1999 and x < 3000 Then
			Data.RemoveValue "\measurement\parameters\" + ParamName
		End If
	Next
	Data.SetSection tmp
End Sub

Sub MeasureTime()
	Dim ObjList
	Dim lpos, strName, strUnits, lkey, fcalibr 
	Dim i, ObjCount, o
	If Data.Getvalue ("\measurement\parameters\Time\Enable")=0 Then Exit Sub
	
	Set ObjList = Objects.GetActiveObject( "Object List" )
	ObjCount = ObjList.GetCount
	lpos = ObjList.GetFirstParameterPosition
	While lpos <> 0	
		lpos = ObjList.GetNextParameter( lpos, strName, strUnits, lkey, fcalibr )
		If lkey = 42 Then	
			For i=0 To ObjCount-1
				Set o = ObjList.GetObjectByIdx( i )
				If Docs.IsPointerNull(o) Then 
					lpos = 0
					exit for
				End If
				o.SetValue lkey, Timer-gStartTime
				Set o = Nothing
			Next 
		End If
	Wend	
	Set ObjList = Nothing
End Sub

Sub DataFix()
	Data.RemoveValue "\measurement\parameters\-"
	Data.RemoveValue "\StatUI\StatParams\0"	

	Dim tmp,a,x,ParamName,i,UserName,Graphics
	tmp = Data.GetSection()
	Data.SetSection "\measurement\parameters"
	a = Data.GetEntriesCount
	For i=a-1 To 0 step -1
		ParamName = Data.GetEntryName(i)
		x = Data.Getvalue ("\measurement\parameters\" + ParamName + "\UserName")
		If x = "" Then Data.RemoveValue "\measurement\parameters\" + ParamName 
		x = Cdbl(Data.Getvalue ("\measurement\parameters\" + ParamName + "\Key"))
		If x > 1999 and x < 3000 or x = "" Then
			Data.RemoveValue "\measurement\parameters\" + ParamName
		End If
	Next
	Data.SetSection "\StatUI\StatParams\"
	a = Data.GetEntriesCount
	For i=a-1 To 0 step -1
		ParamName = Data.GetEntryName(i)
		UserName = Data.Getvalue ("\StatUI\StatParams\" + ParamName + "\UserName")
		Graphics = Data.Getvalue ("\StatUI\StatParams\" + ParamName + "\Graphics")
		If ParamName = UserName and ParamName = Graphics Then
			Data.RemoveValue "\StatUI\StatParams\" + ParamName
		End If
	Next
	Data.SetSection tmp
	Data.Setvalue "\StatUI\StatParams\-196617\Group" , -1
End Sub

Sub SaveWndPos(sName)
	Dim fso,input,output,s,s1,inputTmp,i,strState,state
	Const ForReading = 1
	Const ForWriting = 2

	state = Data.Getvalue ("\General\CurrentState")

	strState = Data.GetValue( "\Paths\States" )
	ToolsSaveState strState & "_tmp_.state"				'
	Set fso = CreateObject("Scripting.FileSystemObject")
	Set input = fso.OpenTextFile (strState & "Master.state",ForReading,true)
	Set inputTmp = fso.OpenTextFile (strState & "_tmp_.state",ForReading,true)
	Set output = fso.CreateTextFile (strState & "_out_.state",ForWriting,false)
	i=0
	Do While Not inputTmp.AtEndOfStream
		s = inputTmp.ReadLine
		If InStr(1, s, sName, 1)=1 Then s1 = s
	Loop
	Do While Not input.AtEndOfStream
		s = input.ReadLine
		If InStr(1, s, sName, 1)=1 Then 
			output.WriteLine s1
		else
			output.WriteLine s
		End If
	Loop
	input.Close
	inputTmp.Close
	output.Close

	fso.DeleteFile strState & "Master.state"
	fso.DeleteFile strState & "_tmp_.state"	
	
	If fso.FileExists (strState & "_tmp_.tbbmp")		  Then fso.DeleteFile strState & "_tmp_.tbbmp"
	If fso.FileExists (strState & "_tmp__backup.state") Then fso.DeleteFile strState & "_tmp__backup.state"

	fso.MoveFile strState & "_out_.state", strState & "Master.state"
	Data.Setvalue "\General\CurrentState", state
End Sub

Sub DataContext_BeforeActivateItem(obj, strType)
	If strType = "Print Template" And Not FormManager.PageActive Then ShowPreviewIndirect 1
End Sub

Sub PropertySheetMan_OnHide()
	If not Docs.IsPointerNull(frmMessage) Then
		frmMessage.btnProperty.ResetPressedState
	End If
End Sub

Sub MakeClassFile(par,n)
	If iChangeClass Then Exit Sub
	Dim Str,i,parampos,rowpos,v,paramkey,objStatTable,ObjList,ObjCount,lParamCount,strUnits,fcalibr,o
	If Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"KeysInfo","KeysEnum","") = par Then Exit Sub
	Set objStatTable = GetStatTable()
	i = 0
	If not Docs.IsPointerNull(objStatTable) Then	
		If n = objStatTable.getRowCount()+1 Then		
			parampos = objStatTable.getFirstParamPos()
			i=0
			While parampos <> 0 and i = 0
				paramkey = objStatTable.getParamKey(parampos)
				rowpos = objStatTable.getFirstRowPos()
				i=0
				While rowpos <> 0 and paramkey <> -2 
					v = objStatTable.getValueByKey ( rowpos, paramkey )
					If v <> 0 Then i=i+1
					rowpos = objStatTable.getNextRowPos(rowpos)
				Wend
				parampos = objStatTable.getNextParamPos(parampos)			 
			Wend
			If i=0 Then paramkey = 0
		End If
	End If
	If i=0 Then
		Set ObjList = Objects.GetActiveObject( "Object List" )
		If not Docs.IsPointerNull(ObjList) Then
			ObjCount = ObjList.GetCount
			lParamCount = ObjList.GetParametersCount
			parampos = ObjList.GetFirstParameterPosition
			i = 0
			While parampos <> 0	and i = 0
				parampos = ObjList.GetNextParameter( parampos, Str, strUnits, paramkey, fcalibr )
				i = 0
				If paramkey <> -2 Then				
					For i=0 To ObjCount-1
						Set o = ObjList.GetObjectByIdx( i )
						v = o.GetValue( paramkey )
						If v <> 0 Then i = i + 1
						Set o = Nothing
					Next 
				End If
			Wend			
		End If
		Set ObjList = Nothing	
	End If
	If i > 0 Then	
			Str = Data.Getvalue ("\Paths\Classes") + sDefaultClass
			FileCopy Data.Getvalue ("\Paths\Classes")+"a.cls", Str 
			Data.Setvalue "\Classes\ClassFile",	Str
			Application.WritePrivateProfileString Str, "KeysInfo", "KeysEnum", paramkey
			'shell.data
			Data.Setvalue "\StatUI\ChartParams\Axis\X_ParamKey" , paramkey
			Data.Setvalue "\StatUI\ChartParams\XParamName" , GetParamUserName(paramkey)
	End If
	Set objStatTable = Nothing 	
End Sub

Sub BlockUnSplitter		'отмена разделения окна путем перетаскивания сплиттера к краю //
	Dim objFrame
	Dim objSplitter
	Set objFrame = MainWnd.ActiveFrame
	If TypeName(objFrame) <> "Nothing" Then		
		Set objSplitter = objFrame.GetSplitter
		objSplitter.MergeSmall = False
	End If
	Set objFrame = Nothing
	Set objSplitter = Nothing
End Sub

Function GetParamDecimalCount(key)
	Dim i,x,a,pos,tmp,ParamName
	GetParamDecimalCount = 2
	tmp = Data.GetSection()
	Data.SetSection "\measurement\parameters"
	a = Data.GetEntriesCount
	For i=0 To a-1
		ParamName = Data.GetEntryName(i)
		x = Data.Getvalue ("\measurement\parameters\" + ParamName + "\Key")
		If x = CLng(key) Then
			x = Data.Getvalue ("\measurement\parameters\" + ParamName + "\Format")
			If InStr(x, ".") and InStr(x, "f") Then
				pos = InStr(x, ".")
				GetParamDecimalCount = CInt(mid(x,pos+1,1))
			End If
			Data.SetSection tmp
			exit Function
		End If
	Next
	Data.SetSection tmp
End Function

'==========================================================
' начальная инициализация, выполняется один раз после инсталляции //
'==========================================================
Sub init_after_install
	Dim fso, file1, f1, objFile, objf
	Dim strCurrentPath, strAppPath, strTemplatesPath
	Dim strInstalLogContent
	Dim strName1

	If Data.GetValue("\General\InitialSetup") = "Complete" Then Exit Sub
	
	strCurrentPath = Data.GetValue("\Paths\CurrentPath\")
	strAppPath = Data.GetValue("\Paths\AppPath\")
	strTemplatesPath = Data.GetValue("\Paths\TemplatesPath\")
	strInstalLogContent = ""

	Const ForReading = 1, ForWriting = 2, ForAppending = 8
	Set fso = CreateObject("Scripting.FileSystemObject")
	
	If fso.FileExists(strCurrentPath & "backUp\setup.log") Then
		Set file1 = fso.OpenTextFile(strCurrentPath & "backUp\setup.log", ForReading)
		strInstalLogContent = file1.ReadAll
		file1.Close
	End If

	' Templates -> Apps
	Set f1 = fso.GetFolder(strTemplatesPath)
	For Each objf In f1.Files
		strName1 = objf.Name
		If fso.FileExists(strTemplatesPath & strName1) And _
		  Not fso.FileExists(strAppPath & strName1) Then
			Set objFile = fso.GetFile(strTemplatesPath & strName1)
			objFile.Copy strAppPath & strName1, True
			Set objFile = fso.GetFile(strAppPath & strName1)
			objFile.Attributes = 2		' make file hidden
			Set objFile = Nothing
		End If
		strInstalLogContent = Replace( strInstalLogContent, _
		  strTemplatesPath & strName1, strAppPath & strName1 )
	Next

	If fso.FileExists(strCurrentPath & "backUp\setup.log") Then
		Set file1 = fso.OpenTextFile(strCurrentPath & "backUp\setup.log", ForWriting, True)
		file1.Write strInstalLogContent
		file1.Close
		Set file1 = Nothing
	End If

	Set objf = Nothing
	Set f1 = Nothing
	Set fso = Nothing

	Data.SetValue "\General\InitialSetup", "Complete"
End Sub

Sub LoadStatCfg()
	Dim str
	str = Data.Getvalue ("\Methods\StatCfg")
	copy_entry_to_shelldata str, "\StatUI"
	copy_entry_to_shelldata str, "\Classes"
	Data.Setvalue "\Methods\StatCfg", str
	
	If not Docs.IsPointerNull(GetStatObj()) Then
		GetStatNdata().CopyNamedData Data, "\StatUI", "\StatUI", 1
		GetStatNdata().CopyNamedData Data, "\Classes", "\Classes", 1
		RebuildStat()
	End If	
End Sub

Sub ReadClassSelection()
	Dim sWhat,sOn
	sWhat = Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"Select","What","")
	If sWhat = "" Then
		sWhat = ObjectGetValue (GetStatTable(),"\StatUI\CalcForAllClasses", "")
	End If	
	sOn = Application.GetPrivateProfileString(Data.Getvalue ("\Classes\ClassFile"),"Select","On","")
	If sOn = "" Then
		sOn = ObjectGetValue (GetStatTable(),"\StatUI\CalcForRelativeClasses", "")
	End If
	ObjectSetValue GetStatTable(),"\StatUI\CalcForAllClasses", sWhat 
	ObjectSetValue GetStatTable(),"\StatUI\CalcForRelativeClasses", sOn
End Sub

Function IsPhasesOL()
	Dim objActiveOL 
	IsPhasesOL = false
	Set objActiveOL = Objects.ActiveObjectList
	If TypeName(objActiveOL) <> "Nothing" Then
		If ObjectGetValue (objActiveOL, "Phases", 0)=1 Then IsPhasesOL = true
	End If
End Function