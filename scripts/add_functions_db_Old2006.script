Option Explicit

'==================================================================================================
' Определение взаимодействия с базой данных //
' objDBData - NameData dbd //
' arrValues - массив любой размерности, на выходе содержит информацию //
'             о связи секции Values и полей базы данных (старое содержимое теряется) //
' arrObjects - массив (0-N)x(0-2), содержащий информацию о связи объектов данных и полей базы. //
'              При вызове функции требуется определить след. значения: //
'                  1 столбец (x,0) - название объекта данных (произвольное = DefFieldDBName в OptionsDB) //
'                  2 столбец (x,1) - тип объекта данных (стандартный = DefFieldType в OptionsDB) //
'              При выходе третий столбец (x,2) содержит имя целевого поля в базе: //
'                  напр. "tbl.img2" или "" (если для объекта не определена связь или не найдено поле) //
' Выход: 0 - не определено или не найдено ни одного поля в базе для объектов данных //
'==================================================================================================
Function init_db_sections(objDBData, ByRef arrValues, arrObjects)
	Const O_Name = 0
	Const O_Type = 1
	Const O_Field = 2

	Const DB_Caption = 0
	Const DB_Field = 1
	Const DB_Type = 2

	Dim intEntriesCount, strValue, strFld, strTable, strField, strFields, strType, strCaption, strF
	Dim i, j, k
	Dim arrAssFields()
	Dim arrDBFields()

	Dim strValuesSection
	Dim strDBSecCaptions
	Dim strDBSecFieldsInfo
	Dim strDBSecAss
	Dim strDBSecAssF

	strValuesSection = "\Values\"
	strDBSecCaptions = "\DBase\DBaseSettings\Tables_Captions\"
	strDBSecFieldsInfo = "\RecordNamedData\FieldsInfo\"
	strDBSecAss = "\TemplateLinks\"
	strDBSecAssF = "\TemplateLinks\Fields\"

	init_db_sections = 0

	'Конвертация связей на внутренние имена полей //
	Call convert_db_links(objDBData)

	' получаем [Values] //
	Data.SetSection strValuesSection
	intEntriesCount = Data.GetEntriesCount
	ReDim arrValues(4, intEntriesCount - 1)
	For i = 0 To intEntriesCount - 1
		Data.SetSection strValuesSection
		arrValues(0, i) = Data.GetEntryName(i)								' Value name //
		arrValues(1, i) = Data.GetValue(strValuesSection & arrValues(0, i))	' Value content //
		arrValues(2, i) = ""												' DB Caption //
		arrValues(3, i) = ""												' DB Field (table.field) //
		arrValues(4, i) = ""												' DB Type //
	Next

	' получаем [Assigned] //
	objDBData.SetSection strDBSecAssF
	intEntriesCount = objDBData.GetEntriesCount
'	If intEntriesCount = 0 Then Exit Function	' если для данной базы еще не определено взаимодействие //
	ReDim arrAssFields(1, intEntriesCount - 1)
	For i = 0 To intEntriesCount - 1
		objDBData.SetSection strDBSecAssF
		arrAssFields(0, i) = objDBData.GetEntryName(i)
		arrAssFields(1, i) = Trim( objDBData.GetValue( strDBSecAssF & arrAssFields(0, i) ) )
	Next

	' поиск всех вхождений [Values] в [Assigned] //
	For i = 0 To UBound(arrValues, 2)
		strValue = LCase(Trim(arrValues(0, i)))
		For j = 0 To UBound(arrAssFields, 2)
			If strValue = LCase(Trim(arrAssFields(0, j))) Then
				arrValues(3, i) = arrAssFields(1, j)		' table.field для даннного Value //
				Exit For
			End If
		Next
	Next

	' получаем соответствия существующих полей базы и их названий (Captions) //
	objDBData.SetSection strDBSecFieldsInfo
	intEntriesCount = objDBData.GetEntriesCount
	ReDim arrDBFields(2, intEntriesCount - 1)
	For i = 0 To intEntriesCount - 1
		objDBData.SetSection strDBSecFieldsInfo
		strFld = objDBData.GetEntryName(i)
		strTable = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Table")
		strField = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Field")
		arrDBFields(DB_Caption, i) = objDBData.GetValue(strDBSecCaptions & strTable & "." & strField)
		strType = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Type")
		If strType = "VTObject" Then
			strType = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\VTtype")
		End If
		arrDBFields(DB_Field, i) = strTable & "." & strField
		arrDBFields(DB_Type, i) = strType
	Next

	' поиск соответствия правых частей [Assigned] и существующих полей базы //
	For i = 0 To UBound(arrValues, 2)
		strField = arrValues(3, i)
		If strField <> "" Then
			For j = 0 To UBound(arrDBFields, 2)
				If strField = arrDBFields(DB_Field, j) Then
					arrValues(2, i) = arrDBFields(DB_Caption, j)	' Caption поля для данного Value //
					arrValues(4, i) = arrDBFields(DB_Type, j)		' тип поля //
					Exit For
				End If
			Next
		End If
	Next

	If IsArray(arrObjects) Then	
		' определяем поля для объектов данных (изображения, список объектов и т.п.) //
		strFields = ""

		For k = 0 To UBound(arrObjects, O_Type)
			strField = ""
			strF = Trim( objDBData.GetValue( strDBSecAss & arrObjects(k, O_Name) ) )
			If strF <> "" And strF <> "---" Then
				For i = 0 To UBound(arrDBFields, 2)
					If strF = arrDBFields(DB_Field, i) Then
						If arrDBFields(DB_Type, i) = arrObjects(k, O_Type) Then
							strField = strF
							Exit For
						End If
					End If
				Next
			End If
			arrObjects(k, O_Field) = strField
			strFields = strFields & strField
		Next
		If strFields <> "" Then init_db_sections = 1
	else 
		init_db_sections = 1	
	End If
End Function

'==================================================================================================
' Определение взаимодействия с базой данных для Мастера //
' objDBData - NameData dbd //
' arrObjects - массив (0-N)x(0-2), содержащий информацию о связи объектов данных и полей базы. //
'              При вызове функции требуется определить след. значения: //
'                  1 столбец (x,0) - название объекта данных (произвольное = DefFieldDBName в OptionsDB) //
'                  2 столбец (x,1) - тип объекта данных (стандартный = DefFieldType в OptionsDB) //
'              При выходе третий столбец (x,2) содержит имя целевого поля в базе: //
'                  напр. "tbl.img2" или "" (если для объекта не определена связь или не найдено поле) //
'                  Отключение посылки обрабатывается непосредственно в send_to_db //
' arrConsts - массив любой размерности, на выходе содержит информацию //
'             о связи констант и полей базы данных (старое содержимое теряется) //
' Выход: 0 - не определено или не найдено ни одного поля в базе для объектов данных //
'==================================================================================================
Function init_db_sections_master(objDBData, arrObjects, ByRef arrConsts)
	Const O_Name = 0
	Const O_Type = 1
	Const O_Field = 2

	Const DB_Caption = 0
	Const DB_Field = 1
	Const DB_Type = 2

	Const C_Field = 0
	Const C_Type = 1

	Dim intEntriesCount, strFld, strTable, strField, strFields, strType, strCaption, strF
	Dim i, j, k
	Dim bSend
	Dim arrAssFields()
	Dim arrDBFields()

	Dim strDbd, strDBSecCaptions, strDBSecFieldsInfo, strDBSecAss, strDBSecAssConst, strDBSecAssSend

	strDbd = GetFileNameExt( Data.GetDefValue("\Settings\DB\Database", "") )
	If strDbd = "" Then strDbd = "Default"
	strDBSecCaptions = "\DBase\DBaseSettings\Tables_Captions\"
	strDBSecFieldsInfo = "\RecordNamedData\FieldsInfo\"
	strDBSecAss = "\Settings\DBLinks\" & strDbd & "\Relations\"
	strDBSecAssConst = "\Settings\DBLinks\" & strDbd & "\Constants\"
	strDBSecAssSend = "\Settings\DBLinks\" & strDbd & "\SendStates\"

	init_db_sections_master = 0

	' получаем информацию о существующих полях базы //
	objDBData.SetSection strDBSecFieldsInfo
	intEntriesCount = objDBData.GetEntriesCount
	ReDim arrDBFields(2, intEntriesCount - 1)
	For i = 0 To intEntriesCount - 1
		objDBData.SetSection strDBSecFieldsInfo
		strFld = objDBData.GetEntryName(i)
		strTable = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Table")
		strField = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Field")
		arrDBFields(DB_Caption, i) = objDBData.GetValue(strDBSecCaptions & strTable & "." & strField)
		strType = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Type")
		If strType = "VTObject" Then
			strType = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\VTtype")
		End If
		arrDBFields(DB_Field, i) = strTable & "." & strField
		arrDBFields(DB_Type, i) = strType
	Next

	'Нахождение полей для объектов //
	If IsArray(arrObjects) Then	
		' определяем поля для объектов данных (изображения, список объектов и т.п.) //
		strFields = ""

		For k = 0 To UBound(arrObjects, O_Type)
			strField = ""
			strF = Trim( Data.GetValue( strDBSecAss & arrObjects(k, O_Name) ) )
			If strF <> "" And strF <> "---" Then
				strF = "." & strF
				For i = 0 To UBound(arrDBFields, 2)
					' ".image1" = "tbl.image1"
					If strF = Right( arrDBFields(DB_Field, i), Len(strF) ) Then
						If arrDBFields(DB_Type, i) = arrObjects(k, O_Type) Then
							strField = arrDBFields(DB_Field, i)
							Exit For
						End If
					End If
				Next
			End If
			arrObjects(k, O_Field) = strField
			strFields = strFields & strField
		Next
		If strFields <> "" Then init_db_sections_master = 1
	Else 
		init_db_sections_master = 1	
	End If

	'Нахождение полей для констант //
	ReDim arrConsts(2,1)
	For k = 0 To 2
		strF = Trim( Data.GetDefValue(strDBSecAssConst & "Const" & CStr(k + 1), "" ) )
		bSend = Data.GetDefValue( strDBSecAssSend & "Const" & CStr(k + 1), 0 )
		If strF <> "" And strF <> "---" And bSend = 1 Then
			strF = "." & strF
			For i = 0 To UBound(arrDBFields, 2)
				' ".image1" = "tbl.image1"
				If strF = Right( arrDBFields(DB_Field, i), Len(strF) ) Then
					If arrDBFields(DB_Type, i) = "String" Or _
					  arrDBFields(DB_Type, i) = "Number" Or _
					  arrDBFields(DB_Type, i) = "DateTime" Then
						arrConsts(k, C_Field) = arrDBFields(DB_Field, i)
						arrConsts(k, C_Type) = arrDBFields(DB_Type, i)
						Exit For
					End If
				End If
			Next
		End If
	Next

End Function

'==========================================================
' Конвертация ссылок взаимодействия на новый формат //
' (по внутренним именам вместо заголовков) //
'==========================================================
Sub convert_db_links(objDBData)
	Const DB_Caption = 0
	Const DB_Field = 1

	Dim strDBSecCaptions
	Dim strDBSecFieldsInfo
	Dim strDBSecAss
	Dim strDBSecAssF

	strDBSecCaptions = "\DBase\DBaseSettings\Tables_Captions\"
	strDBSecFieldsInfo = "\RecordNamedData\FieldsInfo\"
	strDBSecAss = "\TemplateLinks\"
	strDBSecAssF = "\TemplateLinks\Fields\"

	If objDBData.GetDefValue(strDBSecAss & "Settings\LinkedByCaption", 1) = 0 Then Exit Sub

	Dim arrDBFields()
	Dim intEntriesCount, i, strFld, strTable, strField, strCaption

	' получаем соответствия существующих полей базы и их названий (Captions) //
	objDBData.SetSection strDBSecFieldsInfo
	intEntriesCount = objDBData.GetEntriesCount
	ReDim arrDBFields(1, intEntriesCount - 1)
	For i = 0 To intEntriesCount - 1
		objDBData.SetSection strDBSecFieldsInfo
		strFld = objDBData.GetEntryName(i)
		strTable = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Table")
		strField = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Field")
		arrDBFields(DB_Caption, i) = objDBData.GetValue(strDBSecCaptions & strTable & "." & strField)
		arrDBFields(DB_Field, i) = strTable & "." & strField
	Next

	'конвертация Values //
	objDBData.SetSection strDBSecAssF
	intEntriesCount = objDBData.GetEntriesCount
	For i = 0 To intEntriesCount - 1
		objDBData.SetSection strDBSecAssF
		strEntryName = objDBData.GetEntryName(i)
		strCaption = objDBData.GetValue(strDBSecAssF & strEntryName)
		strField = find_dbname_by_caption(strCaption, arrDBFields)
		objDBData.SetValue strDBSecAssF & strEntryName, strField
	Next

	'конвертация вт объектов //
	objDBData.SetSection strDBSecAss
	intEntriesCount = objDBData.GetEntriesCount
	For i = 0 To intEntriesCount - 1
		objDBData.SetSection strDBSecAss
		strEntryName = objDBData.GetEntryName(i)
		objDBData.SetSection strDBSecAss & strEntryName
		If objDBData.GetEntriesCount = 0 Then
			objDBData.SetSection strDBSecAss
			strCaption = objDBData.GetValue(strDBSecAss & strEntryName)
			strField = find_dbname_by_caption(strCaption, arrDBFields)
			objDBData.SetValue strDBSecAss & strEntryName, strField
		End If
	Next

	objDBData.SetValue strDBSecAss & "Settings\LinkedByCaption", 0
End Sub

'==========================================================
' Нахождение имени поля по его заголовку //
'==========================================================
Function find_dbname_by_caption(ByVal sCaption, arrDBFields)
	Const DB_Caption = 0
	Const DB_Field = 1
	find_dbname_by_caption = ""
	sCaption = LCase(sCaption)
	For i = 0 To UBound(arrDBFields, 2)
		If LCase(arrDBFields(DB_Caption, i)) = sCaption Then
			find_dbname_by_caption = arrDBFields(DB_Field, i)
			Exit Function
		End If
	Next
End Function

'==========================================================
' Посылка в базу строковых значений //
' objDBData - NameData dbd //
' arrValues - заполненный массив связи Values и полей базы //
'==========================================================
Sub send_values_to_db(objDBData, arrValues)
	Dim strDBSecFields, strField, strValue, strType, strSentValue
	strDBSecFields = "\RecordNamedData\Fields\"

	For i = 0 To UBound(arrValues, 2)
		strField = arrValues(3, i)
		If strField <> "" Then
			strValue = arrValues(1, i)
			strType = arrValues(4, i)
			strSentValue = ""
			If strValue <> "" Then
				If strType = "Number" Then
					If IsNumeric(strValue) Then strSentValue = CDbl(strValue)
				ElseIf strType = "DateTime" Then
					If IsDate(strValue) Then strSentValue = CDate(strValue)
				ElseIf strType = "String" Then
					strSentValue = CStr(strValue)
				End If
				objDBData.SetValue strDBSecFields & strField, strSentValue
			End If
		End If
	Next
End Sub

'==========================================================
' Посылка из базы строковых значений //
' objDocData - NameData документа Image //
' objDBData - NameData dbd //
' arrValues - заполненный массив связи Values и полей базы //
'==========================================================
Sub send_values_from_db(objDocData, objDBData, arrValues)
	Dim strDBSecFields, strField, strValue, strType, strSentValue
	strDBSecFields = "\RecordNamedData\Fields\"
	strRequestFileds = "\RequestData\Fields\"
	strValuesSection = "\Values\"

	objDocData.SetValue "\RequestData\Filed", 1
	For i = 0 To UBound(arrValues, 2)
		strField = arrValues(3, i)
		If strField <> "" Then
			strValue = objDBData.GetValue(strDBSecFields & strField)
			If strValue <> "" Then
				strValue = CStr(strValue)
			Else
				strValue = ""
			End If
			objDocData.SetValue strRequestFileds & arrValues(0, i), strValue
			Data.SetValue strValuesSection & arrValues(0, i), strValue		' дублируем в shell.data //
		End If
	Next
End Sub

'==========================================================
' Запрос и посылка в базу констант //
' objDBData - NameData dbd //
' arrConsts - заполненный массив полей базы для констант (поле + тип) //
'==========================================================
Sub send_consts_to_db(objDBData, arrConsts)
	Const C_Field = 0
	Const C_Type = 1

	Dim sInputNumber, sInputString
	sInputNumber = Docs.LoadString ("Input value for constant """)
	sInputString = Docs.LoadString ("Input text for constant """)

	Dim strDbd, strDBSecFields, strDBSecAssConst, strConstantsSec

	strDbd = GetFileNameExt( Data.GetDefValue("\Settings\DB\Database", "") )
	If strDbd = "" Then strDbd = "Default"
	strDBSecFields = "\RecordNamedData\Fields\"
	strDBSecAssConst = "\Settings\DBLinks\" & strDbd & "\Constants\"
	'strConstantsSec = "\Settings\DB\Constants\"

	Dim k, OldValue, sText, value

	For k = 0 To UBound(arrConsts, 1)
		If arrConsts(k, C_Field) <> "" Then
			value = Data.GetDefValue(strDBSecAssConst & "Const" & CStr(k + 1) & "_Value", "" )
			Select Case arrConsts(k, C_Type)
			  Case "String"
				'nothing
			  Case "Number"
				If IsNumeric(value) Then
					value = Application.VTDbl(value)
				Else
					value = ""
				End If
			  Case "DateTime"
				If Not IsDate(value) Then value = ""
			End Select

			If value <> "" Then objDBData.SetValue strDBSecFields & arrConsts(k, C_Field), value
		End If
	Next
End Sub

'==========================================================
' Посылка в базу активных элементов //
'==========================================================
Sub send_to_db

	Const O_Name = 0
	Const O_Type = 1
	Const O_Field = 2

	Dim objDBDoc			' документ dbd //
	Dim objDBData			' NameData dbd //
	Dim objPrimaryObject	' Объект в документе Image для клонирования //
	Dim objPrimaryOL		' Object List в документе Image //
	Dim objPrimaryDrw		' Drawing Object List в документе Image //
	Dim objPrimaryBin		' Binary в документе Image //
	Dim objOL				' отклонированный Object List //
	Dim objDrw				' отклонированный Drawing Object List //
	Dim objBin				' отклонированный Binary //
	Dim objImageDoc			' документ Image //
	Dim objDocData			' NameData документа Image //
	Dim arrCloneObjects()	' Ссылки на отклонированные объекты //
	Dim objFieldContent		' Содержимое поля перед проверкой на IsEmpty //
	Dim objImg				' временная ссылка на объект типа Image //

	Dim strField
	Dim strName
	Dim strActiveField		' Активное поле базы при посылке в активное поле //
	Dim strActiveFType		' VT тип активного поля при посылке в активное поле //

	Dim arrValues()
	Dim arrObjects()		' Связь посылаемых объектов и полей базы //
	Dim arrConsts()			' Связь констант и полей базы (для Мастера) //

	Dim arrTypes()			' Массив VT-типов посылаемых объектов //
	ReDim arrTypes(-1)		' (размер может быть меньше arrObjects, напр. для SrcImage и Image - общий VT-тип - Image) //

	Dim arrChildObjects		' Дочерние объекты Image //

	Dim strFormOptSec		' Секция в shell.data, описывающая взамодействие с базой данных //
	Dim iAltSecIdx			' Использовать альтернативную секцию взаимодействия с базой //

	Dim iObjFieldsCount
	Dim i, j, strI, index

	iAltSecIdx = Data.GetDefValue("\tmpDB\AltInteraction", 0)
	If iAltSecIdx <> 0 Then
		strFormOptSec = "\OptionsDB_" & CStr(iAltSecIdx) & "\"
	Else
		strFormOptSec = "\OptionsDB\"
	End If
	If Data.GetDefValue("\Methods\SaveFormsSettingsToMethods", 0) Then
		strFormOptSec = CurrentMethSec() & "FormsSettings" & strFormOptSec
	End If

	iObjFieldsCount = Data.GetDefValue(strFormOptSec & "DefFieldsCount", 0)
	ReDim arrCloneObjects(iObjFieldsCount - 1)
	ReDim arrObjects(iObjFieldsCount - 1, 2)
	For i = 1 To iObjFieldsCount
		arrObjects(i - 1, O_Name) = Data.GetValue(strFormOptSec & "DefFieldDBName" & CStr(i))
		arrObjects(i - 1, O_Type) = Data.GetValue(strFormOptSec & "DefFieldType" & CStr(i))
	Next

	Dim sAssignFields, sOpenDB, sOverwriteRecord, sNoCorrectField, sNoActiveField, sDataSending
	Dim sAviNotSend, sNeedAssign

	sAssignFields = Docs.LoadString ("You have not specified fields for interaction with database!")
	sOpenDB = Docs.LoadString ("Open database!")
	sOverwriteRecord = Docs.LoadString ("You are updating the current record. \nThe old data will be lost. \nContinue?")
	sNoCorrectField = Docs.LoadString ("Invalid field type!")
	sNoActiveField = Docs.LoadString ("Active database field is not found!")
	sDataSending = Docs.LoadString ("Information is sent!")
	sAviNotSend = Docs.LoadString ("AVI cannot be send to database!")
	sNeedAssign = Docs.LoadString ("Set interaction for sending to DB!")

	Dim strDbd, strDBSecFields, strDBSecChilds, strDBSecAss, strDBSecAssSend, strDBSecActiveField
	Dim strDBSecFieldsInfo

	strDbd = GetFileNameExt( Data.GetDefValue("\Settings\DB\Database", "") )
	If strDbd = "" Then strDbd = "Default"
	strDBSecAss = "\Settings\DBLinks\" & strDbd & "\Relations\"
	strDBSecAssSend = "\Settings\DBLinks\" & strDbd & "\SendStates\"
	strDBSecFields = "\RecordNamedData\Fields\"
	strDBSecChilds = "\RecordNamedData\ChildObjects\"
	strDBSecActiveField = "\RecordNamedData\QueryProperties\ActiveField"
	strDBSecFieldsInfo = "\RecordNamedData\FieldsInfo\"

	Dim bImageWithObjects	' Посылать в поле типа Изображение также Список объектов //
	Dim bSendBinary			' Посылать бинари как чилд в поле типа Изображение //
	Dim bGetByName
	Dim bMasterSend			' Посылка в стиле Мастера //
	Dim bSendByOneInstance	' Посылка всех типов объектов по одному //
	Dim bSendToCurrentRecord
	Dim bSendToActiveField	' Посылка активного объекта в активное поле базы данных //

	bImageWithObjects = Data.GetDefValue(strFormOptSec & "SendImageWithObjects", 0)
	bSendBinary = Data.GetDefValue(strFormOptSec & "SendBinary", 0)
	bGetByName = Data.GetDefValue("\tmpDB\GetObjectsByName", 0)
	bMasterSend = Data.GetDefValue(strFormOptSec & "MasterSend", 0)
	bSendByOneInstance = Data.GetDefValue("\tmpDB\SendAllByOne", 0)
	bSendToCurrentRecord = Data.GetDefValue("\tmpDB\SendToCurrent", 0)
	bSendToActiveField = Data.GetDefValue("\tmpDB\SendToActiveField", 0)

	'Для Мастера посылка в текущую запись определяется по-другому //
	If bMasterSend And Not bSendToActiveField Then _
	  bSendToCurrentRecord = 1 - Data.GetDefValue("\Settings\DB\SendToNewDBRecord", 1)


	'внутр. переменные //
	Dim bFoundImage			' Признак, что найдено изображение //
	Dim bObjectsNotEmpty	' Признак, что в базе найдены непустые перезаписываемые объекты //
	Dim bOpenDBOptions		' Необходимость открытия установок взаимодействия //
	Dim bMoreThanOne		' При посылке по одному объекту устанавливается если каких-то > 1 //
	Dim bSendObjectsExists	' Наличие посылаемых объектов (только при посылке в активное поле) //
	Dim bWasSendToActive	' Были найдены объекты того же типа, что и активное поле //
	Dim bEnableApplyOld
	Dim bNothingSend		' Нет ни одного посылаемого объекта //
	Dim pos
	Dim sObjName
	Dim sType
	Dim iFlag
	Dim sName
	Dim objSelObject
	Dim objData
	Dim strDBDocPath
	Dim bSendData
	Dim iActiveField
	Dim strFieldSec
	Dim intAnswer
	Dim bAviTrySend			' Попытка послать avi //
	Dim iSelectedTypesCount

	bSendObjectsExists = False
	bWasSendToActive = False
	bAviTrySend = False

	Set objImageDoc = Docs.GetActiveDocument("Image")
	If Docs.IsPointerNull(objImageDoc) Then
		Data.RemoveValue "\tmpDB\"
		Exit Sub
	End If

	Docs.ActiveDocument = objImageDoc

	Set objDocData = objImageDoc.GetData()


	'Обработка посылки по одному объекту каждого типа //
	If bSendByOneInstance Then
		'Включаем посылку по имени //
		bGetByName = True

		Data.RemoveValue "\tmp\SelectObjects"

		bMoreThanOne = False
		If bMasterSend Then
			
			For i = 0 To iObjFieldsCount - 1
				sObjName = arrObjects(i, O_Name)
				If Data.GetValue (strDBSecAss & sObjName) <> "" And _
				  Data.GetValue (strDBSecAssSend & sObjName) = 1 Then
					sType = arrObjects(i, O_Type)

					'получаем список всех VT-типов посылаемых объектов //
					If FindInArray(arrTypes, sType) = -1 Then
						ReDim Preserve arrTypes( UBound(arrTypes) + 1 )
						arrTypes( UBound(arrTypes) ) = sType
					End If

					If sType = "Object List" And Not Docs.IsPointerNull(objImg) Then
						'ищем родные для Image списки объектов //
						iFlag = 1
						sName = FindSelectedChildObject(objImg, iFlag)
						If iFlag = 0 Then
							'для Мастера Object List посылаем отдельно - "\tmpDB\OLName" не юзаем//
							Data.SetValue "\tmpDB\Object ListName", ""
						ElseIf iFlag > 0 Then
							Data.SetValue "\tmpDB\Object ListName", sName
						ElseIf iFlag = -1 Then
							bMoreThanOne = True
						End If
					Else
						Select Case Objects.GetObjectCount(sType)
						  Case 0
							Data.SetValue "\tmpDB\" & sObjName & "Name", ""
						  Case 1
							'берем первый объект (активный нельзя - может не быть) //
							sType = arrObjects(i, O_Type)
							Data.SetValue "\tmpDB\" & sObjName & "Name", _
							  Objects.GetObject( sType, Objects.GetFirstObjectPos(sType) ).Name
						  Case Else
							'найдено несколько объектов //
							'проверяем, есть ли среди них заселекченный //
							Set objSelObject = Objects.GetSelectedByIndex(sType, 0)
							If Docs.IsPointerNull(objSelObject) Then
								'заселекченных вообще нет - неоднозначность //
								bMoreThanOne = True
							Else
								'заселекченный обнаружен //
								Data.SetValue "\tmpDB\" & sObjName & "Name", objSelObject.Name
							End If
						End Select
					End If

					If Not bMoreThanOne And sObjName = "Image" Then
						Set objImg = Objects.GetObjectByName( Data.GetValue ("\tmpDB\ImageName") )
						
						'ищем родные для Image дроинги //
						iFlag = 2
						sName = FindSelectedChildObject(objImg, iFlag)
						If iFlag = 0 Then
							Data.SetValue "\tmpDB\DrwName", ""
						ElseIf iFlag > 0 Then
							Data.SetValue "\tmpDB\DrwName", sName
						ElseIf iFlag = -1 Then
							bMoreThanOne = True
						End If

						'ищем родные для Image бинарные //
						iFlag = 4
						sName = FindSelectedChildObject(objImg, iFlag)
						If iFlag = 0 Then
							Data.SetValue "\tmpDB\BinName", ""
						ElseIf iFlag > 0 Then
							Data.SetValue "\tmpDB\BinName", sName
						ElseIf iFlag = -1 Then
							bMoreThanOne = True
						End If

					End If
				End If
			Next

			If bMoreThanOne Then
				Dim arrSelectedTypes(4)		'макс. кол-во списков в форме SelectObjects = 5
				i = 0
				j = 0
				Do While j <= UBound(arrTypes)
					sType = arrTypes(j)
					If sType <> "StatTable" And Objects.GetObjectCount(sType) > 0 Then
						strI = CStr(i)
						Data.SetValue "\tmp\SelectObjects\TypeName" & strI, sType
						Data.SetValue "\tmp\SelectObjects\TypeDescr" & strI, Docs.LoadString ( sType )
						arrSelectedTypes(i) = sType
						i = i + 1
					End If
					j = j + 1
					If sType = "Image" Then
						If Objects.GetObjectCount("Drawing Object List") > 0 Then
							sType = "Drawing Object List"
							strI = CStr(i)
							Data.SetValue "\tmp\SelectObjects\TypeName" & strI, sType
							Data.SetValue "\tmp\SelectObjects\TypeDescr" & strI, Docs.LoadString ( sType )
							arrSelectedTypes(i) = "Drw"
							i = i + 1
						End If

						If Objects.GetObjectCount("Binary") > 0 Then
							sType = "Binary"
							strI = CStr(i)
							Data.SetValue "\tmp\SelectObjects\TypeName" & strI, sType
							Data.SetValue "\tmp\SelectObjects\TypeDescr" & strI, Docs.LoadString ( sType )
							arrSelectedTypes(i) = "Bin"
							i = i + 1
						End If
					End If
				Loop
				iSelectedTypesCount = i
				Data.SetValue "\tmp\SelectObjects\TypesCount", iSelectedTypesCount

				HideDockBars
				bEnableApplyOld = Data.GetDefValue ("\FormManager\EnableApply", 1)
				Data.SetValue "\FormManager\EnableApply", 0
				FormManager.ExecutePageModal "SelectObjects"
				Data.SetValue "\FormManager\EnableApply", bEnableApplyOld
				ShowDockBars

				If Data.GetDefValue ("\tmp\SelectObjects\FormOk", 0) Then
					For i = 0 To iSelectedTypesCount - 1
						Data.SetValue "\tmpDB\" & arrSelectedTypes(i) & "Name", _
						  Data.GetValue("\tmp\SelectObjects\Type" & CStr(i) & "_Select")
					Next
				Else
					Data.RemoveValue "\tmpDB\"
					Exit Sub
				End If
			End If
		End If
		Data.RemoveValue "\tmp\SelectObjects"
	End If


	'Создание клонов оригинальных объектов //
	bFoundImage = False
	bNothingSend = True
	For i = 0 To iObjFieldsCount - 1
		Set objPrimaryObject = Nothing

		If bGetByName Then
			strName = Data.GetValue("\tmpDB\" & arrObjects(i, O_Name) & "Name")
			If strName <> "" Then Set objPrimaryObject = Objects.GetObjectByName( strName )
		Else
			Set objPrimaryObject = Objects.GetActiveObject( arrObjects(i, O_Type) )
'			MsgBox arrObjects(i, O_Name) & ", " & arrObjects(i, O_Type) & " = " & TypeName(objPrimaryObject)
		End If

		'Если отключена посылка этого типа данных //
		If bMasterSend Then
			If Data.GetDefValue( strDBSecAssSend & arrObjects(i, O_Name), 1 ) = 0 Then _
			  Set objPrimaryObject = Nothing
		End If
		
		'отключаем посылку avi //
		If Not Docs.IsPointerNull(objPrimaryObject) Then
			If arrObjects(i, O_Type) = "Image" Then
				If objPrimaryObject.GetColorSystem = "RGB_AVI" Then
					Set objPrimaryObject = Nothing
					bAviTrySend = True
					MsgBox sAviNotSend, vbExclamation, sVT
				End If
			End If
		End If

		If Not Docs.IsPointerNull(objPrimaryObject) Then
			
			bNothingSend = False
			
			Set arrCloneObjects(i) = Objects.CloneObject(objPrimaryObject)
			Set objData = arrCloneObjects(i).GetPrivateNamedData
			Select Case Left( arrObjects(i, O_Name), 8 )
			  Case "StatGrap"
				objData.SetValue "\StatUI\Views", 1
			  Case "StatData"
				objData.SetValue "\StatUI\Views", 2
			  Case "StatTabl"
				objData.SetValue "\StatUI\Views", 4
			End Select
			If arrObjects(i, O_Type) = "Image" Then
				bFoundImage = True
			ElseIf arrObjects(i, O_Type) = "StatObject" Then
				If Not CBool(bMasterSend) Then
					objData.SetValue "\StatUI\ChartArea_PropertyScript", ""		' Выключаем //
					objData.SetValue "\StatUI\StatParamArea_PropertyScript", ""	' активные зоны //
					objData.SetValue "\StatUI\TableStatArea_PropertyScript", ""	' статистики //
					objData.SetValue "\StatUI\AxisArea_PropertyScript", ""
					objData.SetValue "\StatUI\X_ParamsArea_PropertyScript", ""
					objData.SetValue "\StatUI\Y_ParamsArea_PropertyScript", ""
					objData.SetValue "\StatUI\ChartParams\DistributionScript", ""
				End If
			End If
			Set objData = Nothing
		End If
	Next
	
	If bNothingSend Then
		Data.RemoveValue "\tmpDB\"
		If Not bAviTrySend Then MsgBox sNeedAssign, vbExclamation, sVT
		Exit Sub
	End If
	
	'Если есть посылаемое изображение, берем его дроинг и список объектов //
	If bFoundImage Then
		If bGetByName Then
			strName = Data.GetValue("\tmpDB\DrwName")
			If strName <> "" Then Set objPrimaryDrw = Objects.GetObjectByName( strName )
			strName = Data.GetValue("\tmpDB\OLName")
			If strName <> "" Then Set objPrimaryOL = Objects.GetObjectByName( strName )
			strName = Data.GetValue("\tmpDB\BinName")
			If bSendBinary And strName <> "" Then Set objPrimaryBin = Objects.GetObjectByName( strName )
		Else
			Set objPrimaryDrw = Objects.GetActiveObject("Drawing Object List")
			Set objPrimaryOL = Objects.ActiveObjectList
			If bSendBinary Then Set objPrimaryBin = Objects.GetActiveObject("Binary")
		End If
		
		If Not Docs.IsPointerNull(objPrimaryDrw) Then _
		  Set objDrw = Objects.CloneObject(objPrimaryDrw)
	
		If Not Docs.IsPointerNull(objPrimaryOL) Then _
		  Set objOL = Objects.CloneObject(objPrimaryOL)
	
		If Not Docs.IsPointerNull(objPrimaryBin) Then _
		  Set objBin = Objects.CloneObject(objPrimaryBin)
	End If

	
	'Открытие базы данных //
	If bMasterSend Then
	'Мастер - открываем базу, прописанную в методике //
		strDBDocPath = Data.GetDefValue("\Settings\DB\Database", "")
		bOpenDBOptions = False
		If strDBDocPath <> "" Then
			'Если база не открыта //
			If Docs.IsPointerNull( GetDocByName("Database", strDBDocPath) ) Then
				Freeze &H0, "OpenDB"
				If ActionManager.FileOpen(strDBDocPath) = 0 Then bOpenDBOptions = True
				Freeze 0, "OpenDB"
			End If
		Else
			bOpenDBOptions = True
		End If

		If bOpenDBOptions Then
			'MsgBox Docs.LoadString ("Select database in method settings"), vbExclamation, sVT
			RunOptionsDBMaster
			strDBDocPath = Data.GetDefValue("\Settings\DB\Database", "")
			If strDBDocPath = "" Or Data.GetDefValue ("\tmpDB\OptionsDBMaster_OK", 0) = 0 Then
				Data.RemoveValue "\tmpDB\"
				Exit Sub
			End If
			
			'Если база не открыта //
			If Docs.IsPointerNull( GetDocByName("Database", strDBDocPath) ) Then
				ActionManager.FileOpen strDBDocPath
			End If
		End If

		Set objDBDoc = GetDocByName("Database", strDBDocPath)
		If Docs.IsPointerNull(objDBDoc) Then
			Data.RemoveValue "\tmpDB\"
			Exit Sub
		End If

		If Data.GetDefValue("\Settings\DB\ActivateDatabase", 1) Then
			Docs.ActiveDocument = objDBDoc
			ShowBlankPreview
		End If
		
		Call Application_OnMainLoop		'прогружаем стэйт базы //
	Else
	'не Мастер - открываем последнюю базу //
		Set objDBDoc = Docs.GetActiveDocument("Database")
		If Docs.IsPointerNull(objDBDoc) Then
			ActionManager.OpenLastDB
			Set objDBDoc = Docs.GetActiveDocument("Database")
	'		MsgBox TypeName(objDBDoc)
			If Docs.IsPointerNull(objDBDoc) Then
				Data.RemoveValue "\tmpDB\"
				Exit Sub
			End If
		End if

		Docs.ActiveDocument = objDBDoc
		ShowBlankPreview
	End If


	'Перед посылкой проверяем наличие и доступность (по запросу) полей в базе //
	Set objDBData = objDBDoc.GetData()

	If bSendToActiveField <> 1 Then
		bSendData = False
		If bMasterSend Then
			If init_db_sections_master(objDBData, arrObjects, arrConsts) <> 0 Then
				bSendData = True
			Else
				MsgBox sAssignFields, vbExclamation, sVT
				RunOptionsDBMaster
				If init_db_sections_master(objDBData, arrValues, arrObjects) <> 0 Then
					bSendData = True
				Else
					MethodMan.Stop
				End If
			End If
		Else
			If init_db_sections(objDBData, arrValues, arrObjects) <> 0 Then
				bSendData = True
			Else
				MsgBox sAssignFields, vbExclamation, sVT
				RunOptionsDB
				If init_db_sections(objDBData, arrValues, arrObjects) <> 0 Then
					bSendData = True
				Else
					Docs.ActiveDocument = objImageDoc
				End If
			End If
		End if
	Else
		bSendData = True
		iActiveField = objDBData.GetValue(strDBSecActiveField)
'		MsgBox iActiveField
		If Not IsEmpty(iActiveField) And IsNumeric(iActiveField) Then
			If iActiveField >=0 Then
				strFieldSec = strDBSecFieldsInfo & "field" & CStr(iActiveField) & "\"
				strActiveField = objDBData.GetValue( strFieldSec & "Table") & "." & _
				  objDBData.GetValue( strFieldSec & "Field")
				strActiveFType = objDBData.GetValue( strFieldSec & "VTtype")
				If strActiveFType = "" Or strActiveField = "" Then
					MsgBox sNoCorrectField, vbExclamation, sVT
					Data.RemoveValue "\tmpDB\"
					Exit Sub
				End If
			Else
				MsgBox sNoActiveField, vbExclamation, sVT
				Data.RemoveValue "\tmpDB\"
				Exit Sub
			End If
		Else
			MsgBox sNoActiveField, vbExclamation, sVT
			Data.RemoveValue "\tmpDB\"
			Exit Sub
		End If
	End If



	'Проверка перезаписи полей //
	If bSendData Then
		
		If bSendToCurrentRecord Then
			
			'Проверка: пустая база или нет //
			UpdateRecordsetInfo 
			If objDBData.GetValue("\DBase\RecordsetInfo\RecordCount") = 0 Then
				ActionManager.InsertRecord
			Else
			
				' Проверка перезаписи данных //
				bObjectsNotEmpty = False
				If bSendToActiveField <> 1 Then
					For i = 0 To iObjFieldsCount - 1
						strField = arrObjects(i, O_Field)
						If strField <> "" And Not Docs.IsPointerNull(arrCloneObjects(i)) Then
							Set objFieldContent = objDBData.GetValue (strDBSecFields & strField)
							If Not Docs.IsPointerNull(objFieldContent) Then
								If CBool( objFieldContent.IsEmpty ) = False _
								   Then bObjectsNotEmpty = True
							End If
						End If
					Next
				Else
					Set objFieldContent = objDBData.GetValue (strDBSecFields & strActiveField)
					If Not Docs.IsPointerNull(objFieldContent) Then
						If CBool( objFieldContent.IsEmpty ) = False _
						   Then bObjectsNotEmpty = True
					End If
				End If

				If bObjectsNotEmpty Then
					intAnswer = MsgBox(sOverwriteRecord, vbYesNo + vbQuestion, sVT)
				Else
					intAnswer = vbYes
				End If
				If intAnswer = vbNo Then bSendData = False
			End If

		Else
			ActionManager.InsertRecord
		End If

	End If

	'Посылка данных //
	If bSendData Then

		For i = 0 To iObjFieldsCount - 1

			If Not Docs.IsPointerNull(arrCloneObjects(i)) Then

				If bSendToActiveField Then
					bSendObjectsExists = True
					If strActiveFType = arrObjects(i, O_Type) Then
						strField = strActiveField
						bWasSendToActive = True
					Else
						strField = ""
					End If
				Else
					strField = arrObjects(i, O_Field)
				End If
				
				If strField <> "" Then
					' Object -> DB //
					objDBData.SetValue strDBSecFields & strField, arrCloneObjects(i)
					
					'Если имя объекта = "Image", посылаем его дроинги и список объектов //
					If arrObjects(i, O_Name) = "Image" Then
						' Drawing Object List -> Image field //
						objDBData.RemoveValue strDBSecChilds & strField		'clear image childs //
						If Not Docs.IsPointerNull(objDrw) Then
							objDBData.SetValue strDBSecFields & strField, objDrw
						End If

						' Binary -> Image field //
						If Not Docs.IsPointerNull(objBin) Then
							objDBData.SetValue strDBSecFields & strField, objBin
						End If

						If bImageWithObjects Then
							' Object List -> Image Field //
							If Not Docs.IsPointerNull(objOL) Then
								objDBData.SetValue strDBSecFields & strField, objOL
							End If
						End If
					End If
				End If
			End If
		Next
		
		'Если при посылке в активное поле не было ни одного объекта требуемого типа //
		If bSendObjectsExists And Not bWasSendToActive Then MsgBox sNoCorrectField, vbExclamation, sVT

		' Values -> DB //
		If bMasterSend = 0 Then Call send_values_to_db(objDBData, arrValues)

		'Константы //
		If bMasterSend And bSendToActiveField <> 1 Then Call send_consts_to_db(objDBData, arrConsts)

		ActionManager.Update
	End If

	Data.RemoveValue "\tmpDB\"
	
	If bMasterSend Then
		If MethodMan.IsRecording Then
			If bSendData Then
				MsgBox sDataSending, vbInformation, sVT
			Else
				MethodMan.Stop
			End If
			Freeze &H0
			Docs.ActiveDocument = objImageDoc
			Freeze 0
		Else
			MethodMan.Pause
		End If
	End If

	Set objDrw = Nothing
	Set objOL = Nothing
	Set objBin = Nothing
	Set objPrimaryDrw = Nothing
	Set objPrimaryOL = Nothing
	Set objPrimaryBin = Nothing
	Set objDBData = Nothing
	Set objDBDoc = Nothing
	Set objDocData = Nothing
	Set objImageDoc = Nothing

End Sub

'==========================================================
' Данная функция пока не отлажена из-за отсутствия необходимости в ней //
'==========================================================
Sub send_from_db
	
	Const O_Name = 0
	Const O_Type = 1
	Const O_Field = 2

	Dim objDBDoc			' документ dbd //
	Dim objDBData			' NameData dbd //
	Dim objPrimaryImg		' img в базе //
	Dim objPrimaryOL		' Object List в базе //
	Dim objPrimaryDrw		' Drawing Object List в базе //
	Dim objImage			' отклонированное img //
	Dim objOL				' отклонированный Object List //
	Dim objDrw				' отклонированный Drawing Object List //
	Dim objImageDoc			' документ Image //
	Dim objDocData			' NameData документа Image //
	Dim arrCloneObjects()	' Ссылки на отклонированные объекты //
	Dim arrCloneObjectsKeys()

	Dim bSendData, strImageBaseKey, strOLBaseKey, strEntryName
	Dim strImageField, strOLField
	Dim arrValues()
	Dim arrObjects()		' Связь посылаемых объектов и полей базы //
	Dim strDBSecChilds

	Dim strFormOptSec
	strFormOptSec = "\OptionsDB\"
	If Data.GetDefValue("\Methods\SaveFormsSettingsToMethods", 0) Then
		strFormOptSec = CurrentMethSec() & "FormsSettings\OptionsDB\"
	End If

	iObjFieldsCount = Data.GetDefValue(strFormOptSec & "DefFieldsCount", 0)
	ReDim arrCloneObjects(iObjFieldsCount - 1)
	ReDim arrCloneObjectsKeys(iObjFieldsCount - 1)
	ReDim arrObjects(iObjFieldsCount - 1, 2)
	For i = 1 To iObjFieldsCount
		arrObjects(i - 1, O_Name) = Data.GetValue(strFormOptSec & "DefFieldDBName" & CStr(i))
		arrObjects(i - 1, O_Type) = Data.GetValue(strFormOptSec & "DefFieldType" & CStr(i))
	Next

	Dim sAssignFields, sOpenDB, sNoEqualObjects, sNoEqualObjectsCgh, sNoEqualObjectsCgh2
	Dim sNoData, sNotCorrespond, sSeriesExist, sVT, sNoOLWithoutImage
	
	sAssignFields = Docs.LoadString ("You have not specified fields for interaction with database!")
	sOpenDB = Docs.LoadString ("Open database!")
	sNoEqualObjects = Docs.LoadString ("Karyogram does not belong to the active image!\nContinue?")
	sNoEqualObjectsCgh = Docs.LoadString ("Averaged and common karyogram belong to different images!")
	sNoEqualObjectsCgh2 = Docs.LoadString ("Averaged karyogram does not belong to the active image!") ' < - проверь //
	sNoData = Docs.LoadString("The current record is empty or \ninteraction settings are not correct!") ' требуется сказать: Данная запись пуста, или некорректны установки взаимодействия с базой.
	sNotCorrespond = Docs.LoadString("Location of common and averaged karyogram" & _
			"\ndoes not match the fields specified. \nContinue?")
	sSeriesExist = Docs.LoadString("The given image stack is already present in the document!")
	sVT = Data.GetValue("\General\DefaultTitle")
	sNoOLWithoutImage = Docs.LoadString("Nonaveraged karyogram can not be sent without image!")

	strDBSecChilds = "\RecordNamedData\ChildObjects\"

	Set objDBDoc = Docs.GetDocument(0, "Database")

	If Docs.IsPointerNull(objDBDoc) Then
		MsgBox sOpenDB, vbExclamation, sVT
		Exit Sub
	End If
	Docs.ActiveDocument = objDBDoc
	
	bSendData = False
	Set objDBData = objDBDoc.GetData()
	If init_db_sections(objDBData, arrValues, arrObjects) <> 0 Then
		bSendData = True
	Else
		MsgBox sAssignFields, vbExclamation, sVT
		RunOptionsDB
		If init_db_sections(objDBData, arrValues, arrObjects) <> 0 Then
			bSendData = True
		End If
	End If

'	strImageField = arrObjects(0, 2)
'	strOLField = arrObjects(1, 2)

	strImageBaseKey = ""
	strOLBaseKey = ""

	Set objImage = Nothing		' предв. сброс после Empty //
	Set objDrw = Nothing		'	-- // --
	Set objOL = Nothing		'	-- // --

	bStatWasFound = False
	For i = 0 To iObjFieldsCount - 1
		Set objPrimaryObject = Objects.GetObjectByName(arrObjects(i, O_Field))	'objPrimaryImg
		If Not Docs.IsPointerNull(objPrimaryObject) Then
'			arrCloneObjectsKeys(i) = GetBaseObjectKey2(objPrimaryObject)
			If arrObjects(i, O_Type) = "Image" Then
				Set arrCloneObjects(i) = Objects.CloneObject(objPrimaryObject)
				strImageBaseKey = arrCloneObjectsKeys(i)
				
				' получаем Drawing Object List (пока только первый Child) //
				objDBData.SetSection strDBSecChilds & arrObjects(i, 2)	'strImageField
				If objDBData.GetEntriesCount > 0 Then
					objDBData.SetSection strDBSecChilds & arrObjects(i, 2)
					strEntryName = objDBData.GetEntryName(0)
					Set objPrimaryDrw = Objects.GetObjectByName(strEntryName)
					If Not Docs.IsPointerNull(objPrimaryDrw) Then
						Set objDrw = Objects.CloneObject(objPrimaryDrw)
					End If
				End If
			ElseIf arrObjects(i, O_Type) = "StatObject" Then
				If Not bStatWasFound Then
					Set arrCloneObjects(i) = Objects.CloneObject(objPrimaryObject)
					Set objData = arrCloneObjects(i).GetPrivateNamedData
					objData.SetValue "\StatUI\Views", 7
					Set objData = Nothing
					bStatWasFound = True
				End If
			Else
				Set arrCloneObjects(i) = Objects.CloneObject(objPrimaryObject)
			End If
		End If
	Next

'	If TypeName(objImage) = "Nothing" And _
'	  TypeName(objOL) = "Nothing" Then
'		MsgBox sNoData, vbExclamation, sVT
'		Exit Sub
'	End If

'	If TypeName(objImage) = "Nothing" And _
'	  TypeName(objOL) <> "Nothing" Then
'		MsgBox sNoOLWithoutImage, vbExclamation, sVT
'		Exit Sub
'	End If

	bGoNext = True
'	If strImageBaseKey <> "" And strOLBaseKey <> "" And strImageBaseKey <> strOLBaseKey Then
'		If MsgBox(sNoEqualObjects, vbQuestion + vbYesNo, sVT) = vbYes Then
'			bGoNext = True
'		Else
'			bGoNext = False
'		End If
'	End If

	If bGoNext Then
		bNeedCreateDoc = True
		Set objImageDoc = Docs.GetDocument(0, "Image")	' активизация Image перед посылкой //
		If TypeName(objImageDoc) <> "Nothing" Then
			Docs.ActiveDocument = objImageDoc
			bNeedCreateDoc = False
		End If

		Data.SetValue "\xpbar\StartTool", 1

		If bNeedCreateDoc Then
			bGoNext = FileNew("Image")
		Else
			bGoNext = True
		End If
	End If

	If bGoNext Then

		Set objImageDoc = Docs.GetDocument(0, "Image")
		If TypeName(objImageDoc) <> "Nothing" Then

			Docs.ActiveDocument = objImageDoc
			Set objDocData = objImageDoc.GetData()

			ActionState.BeginGroupUndo "vt"

			
			For i = 0 To iObjFieldsCount - 1
				If Not Docs.IsPointerNull(arrCloneObjects(i)) Then Objects.AddObject arrCloneObjects(i)
			Next

			If Not Docs.IsPointerNull(objOL) Then Objects.AddObject objOL
			If Not Docs.IsPointerNull(objDrw) Then Objects.AddObject objDrw
			
'			ActionManager.Generate_Values
			Call send_values_from_db(objDocData, objDBData, arrValues)


			If isCgh Then	' CGH ==========================================
				
				If FindBaseKey(strImageBaseKey, "Image") Then
					
					MsgBox sSeriesExist, vbExclamation, sVT

				End If
			
			Else	' Karyo ==========================================
				
			End If

			objImageDoc.SetModifiedFlag False

			ActionState.EndGroupUndo 1

		End If
	
	End If


	Set objDrw = Nothing
	Set objOL = Nothing
	Set objImage = Nothing
	Set objPrimaryDrw = Nothing
	Set objPrimaryOL = Nothing
	Set objPrimaryImg = Nothing
	Set objDBData = Nothing 
	Set objDBDoc = Nothing
	Set objDocData = Nothing
	Set objImageDoc = Nothing

End Sub

'==========================================================
' Для разработчиков: //
'	Чистка базы данных от остатков старых полей //
'==========================================================
Sub dev_fix_db_fields
	Dim objDBDoc, objDBData
	Dim arrDBFields()
	Dim strDBSecFieldsInfo
	Dim intEntriesCount
	Dim i, j
	Dim strFld
	Dim strTable
	Dim strField
	Dim strDBSec
	Dim bFound

	Set objDBDoc = Docs.GetActiveDocument("Database")
	If TypeName(objDBDoc) = "Nothing" Then MsgBox "Error! No Database": Exit Sub
	
	Set objDBData = objDBDoc.GetData()
	If TypeName(objDBData) = "Nothing" Then MsgBox "Error! Can`t get DB Named Data": Exit Sub

	'Получаем все реальные поля базы //
	strDBSecFieldsInfo = "\RecordNamedData\FieldsInfo\"
	objDBData.SetSection strDBSecFieldsInfo
	intEntriesCount = objDBData.GetEntriesCount
	ReDim arrDBFields(intEntriesCount - 1)
	For i = 0 To intEntriesCount - 1
		objDBData.SetSection strDBSecFieldsInfo
		strFld = objDBData.GetEntryName(i)
		strTable = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Table")
		strField = objDBData.GetValue(strDBSecFieldsInfo & strFld & "\Field")
		arrDBFields(i) = strTable & "." & strField
	Next
	
	'Tables_Captions section
	strDBSec = "\DBase\DBaseSettings\Tables_Captions"
	objDBData.SetSection strDBSec
	intEntriesCount = objDBData.GetEntriesCount
	For i = intEntriesCount - 1 To 0 Step -1
		objDBData.SetSection strDBSec
		strFld = objDBData.GetEntryName(i)
		bFound = False
		For j = 0 To UBound(arrDBFields)
			If strFld = arrDBFields(j) Then bFound = True: Exit For
		Next
		If bFound = False Then objDBData.RemoveValue strDBSec & "\" & strFld
	Next

	'RequiredValues section
	strDBSec = "\DBase\DBaseSettings\RequiredValues"
	objDBData.SetSection strDBSec
	intEntriesCount = objDBData.GetEntriesCount
	For i = intEntriesCount - 1 To 0 Step -1
		objDBData.SetSection strDBSec
		strFld = objDBData.GetEntryName(i)
		bFound = False
		For j = 0 To UBound(arrDBFields)
			If strFld = arrDBFields(j) Then bFound = True: Exit For
		Next
		If bFound = False Then objDBData.RemoveValue strDBSec & "\" & strFld
	Next

	'DefaultValuesCheck section
	strDBSec = "\DBase\DBaseSettings\DefaultValuesCheck"
	objDBData.SetSection strDBSec
	intEntriesCount = objDBData.GetEntriesCount
	For i = intEntriesCount - 1 To 0 Step -1
		objDBData.SetSection strDBSec
		strFld = objDBData.GetEntryName(i)
		bFound = False
		For j = 0 To UBound(arrDBFields)
			If strFld = arrDBFields(j) Then bFound = True: Exit For
		Next
		If bFound = False Then objDBData.RemoveValue strDBSec & "\" & strFld
	Next

	'DefaultValues section
	strDBSec = "\DBase\DBaseSettings\DefaultValues"
	objDBData.SetSection strDBSec
	intEntriesCount = objDBData.GetEntriesCount
	For i = intEntriesCount - 1 To 0 Step -1
		objDBData.SetSection strDBSec
		strFld = objDBData.GetEntryName(i)
		bFound = False
		For j = 0 To UBound(arrDBFields)
			If strFld = arrDBFields(j) Then bFound = True: Exit For
		Next
		If bFound = False Then objDBData.RemoveValue strDBSec & "\" & strFld
	Next

	'VTObjectTypes section
	strDBSec = "\DBase\DBaseSettings\VTObjectTypes"
	objDBData.SetSection strDBSec
	intEntriesCount = objDBData.GetEntriesCount
	For i = intEntriesCount - 1 To 0 Step -1
		objDBData.SetSection strDBSec
		strFld = objDBData.GetEntryName(i)
		bFound = False
		For j = 0 To UBound(arrDBFields)
			If strFld = arrDBFields(j) Then bFound = True: Exit For
		Next
		If bFound = False Then objDBData.RemoveValue strDBSec & "\" & strFld
	Next
End Sub
